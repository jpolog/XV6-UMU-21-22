!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	./kbd.h	11;"	d
AS	./Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	./Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	./lapic.c	25;"	d	file:
Align	./umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	./sh.c	12;"	d	file:
BACKSPACE	./console.c	127;"	d	file:
BBLOCK	./fs.h	48;"	d
BCAST	./lapic.c	28;"	d	file:
BIG	./usertests.c	1452;"	d	file:
BPB	./fs.h	45;"	d
BSIZE	./fs.h	6;"	d
BUSY	./lapic.c	29;"	d	file:
B_DIRTY	./buf.h	13;"	d
B_VALID	./buf.h	12;"	d
C	./console.c	189;"	d	file:
C	./kbd.h	32;"	d
CAPSLOCK	./kbd.h	13;"	d
CC	./Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	./Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Og -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer$/;"	m
CMOS_PORT	./lapic.c	123;"	d	file:
CMOS_RETURN	./lapic.c	124;"	d	file:
CMOS_STATA	./lapic.c	163;"	d	file:
CMOS_STATB	./lapic.c	164;"	d	file:
CMOS_UIP	./lapic.c	165;"	d	file:
COM1	./uart.c	15;"	d	file:
CONSOLE	./file.h	37;"	d
CONV	./kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	./lapic.c	217;"	d	file:
CONV	./lapic.c	224;"	d	file:
CPUS	./Makefile	/^CPUS := 2$/;"	m
CR0_PE	./mmu.h	8;"	d
CR0_PG	./mmu.h	10;"	d
CR0_WP	./mmu.h	9;"	d
CR4_PSE	./mmu.h	12;"	d
CRTPORT	./console.c	128;"	d	file:
CTL	./kbd.h	10;"	d
DAY	./lapic.c	170;"	d	file:
DEASSERT	./lapic.c	26;"	d	file:
DELIVS	./lapic.c	24;"	d	file:
DEVSPACE	./memlayout.h	5;"	d
DIRSIZ	./fs.h	51;"	d
DPL_USER	./mmu.h	53;"	d
Disassembly	./bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./date.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./dup2test.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	./zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	./kbd.h	17;"	d
ELF_MAGIC	./elf.h	3;"	d
ELF_PROG_FLAG_EXEC	./elf.h	40;"	d
ELF_PROG_FLAG_READ	./elf.h	42;"	d
ELF_PROG_FLAG_WRITE	./elf.h	41;"	d
ELF_PROG_LOAD	./elf.h	37;"	d
EMBRYO	./proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	./lapic.c	19;"	d	file:
EOI	./lapic.c	17;"	d	file:
ERROR	./lapic.c	38;"	d	file:
ESR	./lapic.c	20;"	d	file:
EXEC	./sh.c	8;"	d	file:
EXTMEM	./memlayout.h	3;"	d
EXTRA	./Makefile	/^EXTRA=\\$/;"	m
FD_INODE	./file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_NONE	./file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_PIPE	./file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FILES	./Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	./lapic.c	30;"	d	file:
FL_IF	./mmu.h	5;"	d
FSSIZE	./param.h	13;"	d
GDBPORT	./Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	./lapic.c	169;"	d	file:
Header	./umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	./fs.h	42;"	d
ICRHI	./lapic.c	31;"	d	file:
ICRLO	./lapic.c	21;"	d	file:
ID	./lapic.c	14;"	d	file:
IDE_BSY	./ide.c	17;"	d	file:
IDE_CMD_RDMUL	./ide.c	24;"	d	file:
IDE_CMD_READ	./ide.c	22;"	d	file:
IDE_CMD_WRITE	./ide.c	23;"	d	file:
IDE_CMD_WRMUL	./ide.c	25;"	d	file:
IDE_DF	./ide.c	19;"	d	file:
IDE_DRDY	./ide.c	18;"	d	file:
IDE_ERR	./ide.c	20;"	d	file:
INIT	./lapic.c	22;"	d	file:
INPUT_BUF	./console.c	181;"	d	file:
INT_ACTIVELOW	./ioapic.c	22;"	d	file:
INT_DISABLED	./ioapic.c	20;"	d	file:
INT_LEVEL	./ioapic.c	21;"	d	file:
INT_LOGICAL	./ioapic.c	23;"	d	file:
IOAPIC	./ioapic.c	9;"	d	file:
IO_PIC1	./picirq.c	6;"	d	file:
IO_PIC2	./kernel.asm	/^#define IO_PIC2         0xA0    \/\/ Slave (IRQs 8-15)$/;"	d
IO_PIC2	./picirq.c	7;"	d	file:
IPB	./fs.h	39;"	d
IRQ_COM1	./traps.h	34;"	d
IRQ_ERROR	./traps.h	36;"	d
IRQ_IDE	./traps.h	35;"	d
IRQ_KBD	./traps.h	33;"	d
IRQ_SPURIOUS	./traps.h	37;"	d
IRQ_TIMER	./traps.h	32;"	d
KBDATAP	./kbd.h	5;"	d
KBSTATP	./kbd.h	3;"	d
KBS_DIB	./kbd.h	4;"	d
KERNBASE	./memlayout.h	8;"	d
KERNLINK	./memlayout.h	9;"	d
KEY_DEL	./kbd.h	29;"	d
KEY_DN	./kbd.h	23;"	d
KEY_END	./kbd.h	21;"	d
KEY_HOME	./kbd.h	20;"	d
KEY_INS	./kbd.h	28;"	d
KEY_LF	./kbd.h	24;"	d
KEY_PGDN	./kbd.h	27;"	d
KEY_PGUP	./kbd.h	26;"	d
KEY_RT	./kbd.h	25;"	d
KEY_UP	./kbd.h	22;"	d
KSTACKSIZE	./param.h	2;"	d
LD	./Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	./lapic.c	27;"	d	file:
LINT0	./lapic.c	36;"	d	file:
LINT1	./lapic.c	37;"	d	file:
LIST	./sh.c	11;"	d	file:
LOGSIZE	./param.h	11;"	d
MASKED	./lapic.c	39;"	d	file:
MAXARG	./param.h	9;"	d
MAXARGS	./sh.c	14;"	d	file:
MAXFILE	./fs.h	26;"	d
MAXOPBLOCKS	./param.h	10;"	d
MEMFSOBJS	./Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	./lapic.c	168;"	d	file:
MONTH	./lapic.c	171;"	d	file:
MPBOOT	./mp.h	34;"	d
MPBUS	./mp.h	50;"	d
MPIOAPIC	./mp.h	51;"	d
MPIOINTR	./mp.h	52;"	d
MPLINTR	./mp.h	53;"	d
MPPROC	./mp.h	49;"	d
N	./exitwait.c	24;"	d	file:
N	./forktest.c	8;"	d	file:
NBUF	./param.h	12;"	d
NCPU	./param.h	3;"	d
NDEV	./param.h	7;"	d
NDIRECT	./fs.h	24;"	d
NELEM	./defs.h	190;"	d
NFILE	./param.h	5;"	d
NINDIRECT	./fs.h	25;"	d
NINODE	./param.h	6;"	d
NINODES	./mkfs.c	18;"	d	file:
NO	./kbd.h	7;"	d
NOFILE	./param.h	4;"	d
NPDENTRIES	./mmu.h	83;"	d
NPROC	./param.h	1;"	d
NPTENTRIES	./mmu.h	84;"	d
NSEGS	./mmu.h	22;"	d
NULL	./defs.h	192;"	d
NULL	./user.h	42;"	d
NUMLOCK	./kbd.h	14;"	d
OBJCOPY	./Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	./Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	./Makefile	/^OBJS = \\$/;"	m
O_CREATE	./fcntl.h	4;"	d
O_RDONLY	./fcntl.h	1;"	d
O_RDWR	./fcntl.h	3;"	d
O_WRONLY	./fcntl.h	2;"	d
P2V	./memlayout.h	12;"	d
P2V_WO	./memlayout.h	15;"	d
PCINT	./lapic.c	35;"	d	file:
PDX	./mmu.h	74;"	d
PDXSHIFT	./mmu.h	88;"	d
PERIODIC	./lapic.c	34;"	d	file:
PGADDR	./mmu.h	80;"	d
PGROUNDDOWN	./mmu.h	91;"	d
PGROUNDUP	./mmu.h	90;"	d
PGSIZE	./mmu.h	85;"	d
PHYSTOP	./memlayout.h	4;"	d
PIPE	./sh.c	10;"	d	file:
PIPESIZE	./pipe.c	11;"	d	file:
PRINT	./Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_ADDR	./mmu.h	100;"	d
PTE_FLAGS	./mmu.h	101;"	d
PTE_P	./mmu.h	94;"	d
PTE_PS	./mmu.h	97;"	d
PTE_U	./mmu.h	96;"	d
PTE_W	./mmu.h	95;"	d
PTX	./mmu.h	77;"	d
PTXSHIFT	./mmu.h	87;"	d
QEMU	./Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	./Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	./Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	./sh.c	9;"	d	file:
REG_ID	./ioapic.c	11;"	d	file:
REG_TABLE	./ioapic.c	13;"	d	file:
REG_VER	./ioapic.c	12;"	d	file:
ROOTDEV	./param.h	8;"	d
ROOTINO	./fs.h	5;"	d
RTC_ADDR	./usertests.c	1701;"	d	file:
RTC_DATA	./usertests.c	1702;"	d	file:
RUNNABLE	./proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	./proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	./kbd.h	15;"	d
SECS	./lapic.c	167;"	d	file:
SECTOR_SIZE	./ide.c	16;"	d	file:
SECTSIZE	./bootmain.c	13;"	d	file:
SEG	./mmu.h	43;"	d
SEG16	./mmu.h	47;"	d
SEG_ASM	./asm.h	11;"	d
SEG_KCODE	./mmu.h	15;"	d
SEG_KDATA	./mmu.h	16;"	d
SEG_NULLASM	./asm.h	5;"	d
SEG_TSS	./mmu.h	19;"	d
SEG_UCODE	./mmu.h	17;"	d
SEG_UDATA	./mmu.h	18;"	d
SETGATE	./mmu.h	168;"	d
SHIFT	./kbd.h	9;"	d
SLEEPING	./proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	./lapic.c	23;"	d	file:
STA_R	./asm.h	18;"	d
STA_R	./mmu.h	58;"	d
STA_W	./asm.h	17;"	d
STA_W	./mmu.h	57;"	d
STA_X	./asm.h	16;"	d
STA_X	./mmu.h	56;"	d
STRIP	./Makefile	/^STRIP = $(TOOLPREFIX)strip$/;"	m
STS_IG32	./mmu.h	62;"	d
STS_T32A	./mmu.h	61;"	d
STS_TG32	./mmu.h	63;"	d
SVR	./lapic.c	18;"	d	file:
SYSCALL	./usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	./syscall.h	10;"	d
SYS_close	./syscall.h	22;"	d
SYS_date	./syscall.h	23;"	d
SYS_dup	./syscall.h	11;"	d
SYS_dup2	./syscall.h	24;"	d
SYS_exec	./syscall.h	8;"	d
SYS_exit	./syscall.h	3;"	d
SYS_fork	./syscall.h	2;"	d
SYS_fstat	./syscall.h	9;"	d
SYS_getpid	./syscall.h	12;"	d
SYS_kill	./syscall.h	7;"	d
SYS_link	./syscall.h	20;"	d
SYS_mkdir	./syscall.h	21;"	d
SYS_mknod	./syscall.h	18;"	d
SYS_open	./syscall.h	16;"	d
SYS_pipe	./syscall.h	5;"	d
SYS_read	./syscall.h	6;"	d
SYS_sbrk	./syscall.h	13;"	d
SYS_sleep	./syscall.h	14;"	d
SYS_unlink	./syscall.h	19;"	d
SYS_uptime	./syscall.h	15;"	d
SYS_wait	./syscall.h	4;"	d
SYS_write	./syscall.h	17;"	d
TCCR	./lapic.c	41;"	d	file:
TDCR	./lapic.c	42;"	d	file:
TICR	./lapic.c	40;"	d	file:
TIMER	./lapic.c	32;"	d	file:
TOOLPREFIX	./Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	./lapic.c	16;"	d	file:
T_ALIGN	./traps.h	21;"	d
T_BOUND	./traps.h	9;"	d
T_BRKPT	./traps.h	7;"	d
T_DBLFLT	./traps.h	12;"	d
T_DEBUG	./traps.h	5;"	d
T_DEFAULT	./traps.h	28;"	d
T_DEV	./stat.h	3;"	d
T_DEVICE	./traps.h	11;"	d
T_DIR	./stat.h	1;"	d
T_DIVIDE	./traps.h	4;"	d
T_FILE	./stat.h	2;"	d
T_FPERR	./traps.h	20;"	d
T_GPFLT	./traps.h	17;"	d
T_ILLOP	./traps.h	10;"	d
T_IRQ0	./traps.h	30;"	d
T_MCHK	./traps.h	22;"	d
T_NMI	./traps.h	6;"	d
T_OFLOW	./traps.h	8;"	d
T_PGFLT	./traps.h	18;"	d
T_SEGNP	./traps.h	15;"	d
T_SIMDERR	./traps.h	23;"	d
T_STACK	./traps.h	16;"	d
T_SYSCALL	./traps.h	27;"	d
T_TSS	./traps.h	14;"	d
ULIB	./Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	./proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	./Makefile	/^UPROGS=\\$/;"	m
V2P	./memlayout.h	11;"	d
V2P_WO	./memlayout.h	14;"	d
VER	./lapic.c	15;"	d	file:
WEXITSTATUS	./exitwait.c	13;"	d	file:
WEXITTRAP	./exitwait.c	21;"	d	file:
WIFEXITED	./exitwait.c	9;"	d	file:
WIFSIGNALED	./exitwait.c	17;"	d	file:
X1	./lapic.c	33;"	d	file:
YEAR	./lapic.c	172;"	d	file:
ZOMBIE	./proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_cat	./cat.asm	/^_cat:     file format elf32-i386$/;"	l
_date	./date.asm	/^_date:     file format elf32-i386$/;"	l
_dup2test	./dup2test.asm	/^_dup2test:     file format elf32-i386$/;"	l
_echo	./echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	./forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	./grep.asm	/^_grep:     file format elf32-i386$/;"	l
_init	./init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	./kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	./ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	./ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	./mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_rm	./rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	./sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	./entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	./stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_usertests	./usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_wc	./wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	./zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	./grep.asm	/^   a:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a	./initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	./kernel.asm	/^      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;$/;"	d
a	./kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	./kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	./kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	./kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	./usertests.asm	/^       a:	68 74 3c 00 00       	push   $0x3c74$/;"	l
a	./wc.asm	/^   a:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
a0	./cat.asm	/^  a0:	7d 59                	jge    0xfb$/;"	l
a0	./forktest.asm	/^  a0:	6a 01                	push   $0x1$/;"	l
a0	./grep.asm	/^  a0:	75 cb                	jne    0x6d$/;"	l
a0	./ln.asm	/^  a0:	75 08                	jne    0xaa$/;"	l
a0	./mkdir.asm	/^  a0:	c3                   	ret    $/;"	l
a0	./rm.asm	/^  a0:	c3                   	ret    $/;"	l
a0	./sh.asm	/^  a0:	74 0f                	je     0xb1$/;"	l
a0	./zombie.asm	/^  a0:	5d                   	pop    %ebp$/;"	l
a00	./sh.asm	/^ a00:	89 e5                	mov    %esp,%ebp$/;"	l
a00	./usertests.asm	/^     a00:	75 24                	jne    0xa26$/;"	l
a02	./sh.asm	/^ a02:	56                   	push   %esi$/;"	l
a02	./usertests.asm	/^     a02:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a03	./sh.asm	/^ a03:	53                   	push   %ebx$/;"	l
a04	./sh.asm	/^ a04:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
a05	./usertests.asm	/^     a05:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
a07	./sh.asm	/^ a07:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a08	./usertests.asm	/^     a08:	e8 ed 2d 00 00       	call   0x37fa$/;"	l
a0a	./sh.asm	/^ a0a:	89 f0                	mov    %esi,%eax$/;"	l
a0c	./sh.asm	/^ a0c:	89 d1                	mov    %edx,%ecx$/;"	l
a0d	./usertests.asm	/^     a0d:	e8 c8 2d 00 00       	call   0x37da$/;"	l
a0e	./sh.asm	/^ a0e:	83 c2 01             	add    $0x1,%edx$/;"	l
a1	./date.asm	/^  a1:	eb ed                	jmp    0x90$/;"	l
a1	./dup2test.asm	/^  a1:	68 18 0a 00 00       	push   $0xa18$/;"	l
a1	./kill.asm	/^  a1:	83 c1 01             	add    $0x1,%ecx$/;"	l
a1	./ls.asm	/^  a1:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
a1	./mkdir.asm	/^  a1:	f3 0f 1e fb          	endbr32 $/;"	l
a1	./rm.asm	/^  a1:	f3 0f 1e fb          	endbr32 $/;"	l
a1	./usertests.asm	/^      a1:	ff 35 10 5c 00 00    	pushl  0x5c10$/;"	l
a1	./wc.asm	/^  a1:	56                   	push   %esi$/;"	l
a1	./zombie.asm	/^  a1:	c3                   	ret    $/;"	l
a11	./sh.asm	/^ a11:	89 c3                	mov    %eax,%ebx$/;"	l
a12	./usertests.asm	/^     a12:	83 c4 08             	add    $0x8,%esp$/;"	l
a13	./sh.asm	/^ a13:	83 c0 01             	add    $0x1,%eax$/;"	l
a15	./usertests.asm	/^     a15:	68 5b 3f 00 00       	push   $0x3f5b$/;"	l
a16	./sh.asm	/^ a16:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
a19	./sh.asm	/^ a19:	88 0b                	mov    %cl,(%ebx)$/;"	l
a1a	./usertests.asm	/^     a1a:	6a 01                	push   $0x1$/;"	l
a1b	./sh.asm	/^ a1b:	84 c9                	test   %cl,%cl$/;"	l
a1c	./usertests.asm	/^     a1c:	e8 02 2f 00 00       	call   0x3923$/;"	l
a1d	./sh.asm	/^ a1d:	75 ed                	jne    0xa0c$/;"	l
a1f	./sh.asm	/^ a1f:	89 f0                	mov    %esi,%eax$/;"	l
a2	./cat.asm	/^  a2:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
a2	./echo.asm	/^  a2:	0f b6 12             	movzbl (%edx),%edx$/;"	l
a2	./forktest.asm	/^  a2:	e8 59 ff ff ff       	call   0x0$/;"	l
a2	./grep.asm	/^  a2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a2	./init.asm	/^  a2:	83 c4 10             	add    $0x10,%esp$/;"	l
a2	./ln.asm	/^  a2:	83 c1 01             	add    $0x1,%ecx$/;"	l
a2	./sh.asm	/^  a2:	8b 03                	mov    (%ebx),%eax$/;"	l
a2	./wc.asm	/^  a2:	ff 75 dc             	pushl  -0x24(%ebp)$/;"	l
a2	./zombie.asm	/^  a2:	f3 0f 1e fb          	endbr32 $/;"	l
a21	./sh.asm	/^ a21:	5b                   	pop    %ebx$/;"	l
a21	./usertests.asm	/^     a21:	83 c4 10             	add    $0x10,%esp$/;"	l
a22	./sh.asm	/^ a22:	5e                   	pop    %esi$/;"	l
a23	./sh.asm	/^ a23:	5d                   	pop    %ebp$/;"	l
a24	./sh.asm	/^ a24:	c3                   	ret    $/;"	l
a24	./usertests.asm	/^     a24:	eb a9                	jmp    0x9cf$/;"	l
a25	./sh.asm	/^ a25:	f3 0f 1e fb          	endbr32 $/;"	l
a26	./usertests.asm	/^     a26:	83 ec 04             	sub    $0x4,%esp$/;"	l
a29	./sh.asm	/^ a29:	55                   	push   %ebp$/;"	l
a29	./usertests.asm	/^     a29:	ff 75 d0             	pushl  -0x30(%ebp)$/;"	l
a2a	./sh.asm	/^ a2a:	89 e5                	mov    %esp,%ebp$/;"	l
a2c	./sh.asm	/^ a2c:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
a2c	./usertests.asm	/^     a2c:	68 44 3f 00 00       	push   $0x3f44$/;"	l
a2f	./sh.asm	/^ a2f:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a3	./date.asm	/^  a3:	0f b6 c0             	movzbl %al,%eax$/;"	l
a3	./stressfs.asm	/^  a3:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax$/;"	l
a31	./usertests.asm	/^     a31:	6a 01                	push   $0x1$/;"	l
a32	./sh.asm	/^ a32:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
a33	./usertests.asm	/^     a33:	e8 eb 2e 00 00       	call   0x3923$/;"	l
a35	./sh.asm	/^ a35:	84 c0                	test   %al,%al$/;"	l
a37	./sh.asm	/^ a37:	74 0c                	je     0xa45$/;"	l
a38	./usertests.asm	/^     a38:	e8 95 2d 00 00       	call   0x37d2$/;"	l
a39	./sh.asm	/^ a39:	3a 02                	cmp    (%edx),%al$/;"	l
a3b	./sh.asm	/^ a3b:	75 08                	jne    0xa45$/;"	l
a3d	./sh.asm	/^ a3d:	83 c1 01             	add    $0x1,%ecx$/;"	l
a3d	./usertests.asm	/^     a3d:	83 ec 08             	sub    $0x8,%esp$/;"	l
a4	./kill.asm	/^  a4:	83 c2 01             	add    $0x1,%edx$/;"	l
a4	./ls.asm	/^  a4:	6a 00                	push   $0x0$/;"	l
a4	./sh.asm	/^  a4:	83 f8 05             	cmp    $0x5,%eax$/;"	l
a40	./sh.asm	/^ a40:	83 c2 01             	add    $0x1,%edx$/;"	l
a40	./usertests.asm	/^     a40:	68 65 3f 00 00       	push   $0x3f65$/;"	l
a43	./sh.asm	/^ a43:	eb ed                	jmp    0xa32$/;"	l
a45	./sh.asm	/^ a45:	0f b6 c0             	movzbl %al,%eax$/;"	l
a45	./usertests.asm	/^     a45:	6a 01                	push   $0x1$/;"	l
a47	./usertests.asm	/^     a47:	e8 d7 2e 00 00       	call   0x3923$/;"	l
a48	./sh.asm	/^ a48:	0f b6 12             	movzbl (%edx),%edx$/;"	l
a4b	./sh.asm	/^ a4b:	29 d0                	sub    %edx,%eax$/;"	l
a4c	./usertests.asm	/^     a4c:	e8 81 2d 00 00       	call   0x37d2$/;"	l
a4d	./sh.asm	/^ a4d:	5d                   	pop    %ebp$/;"	l
a4e	./sh.asm	/^ a4e:	c3                   	ret    $/;"	l
a4f	./sh.asm	/^ a4f:	f3 0f 1e fb          	endbr32 $/;"	l
a5	./cat.asm	/^  a5:	8d 3c b0             	lea    (%eax,%esi,4),%edi$/;"	l
a5	./echo.asm	/^  a5:	29 d0                	sub    %edx,%eax$/;"	l
a5	./grep.asm	/^  a5:	80 38 00             	cmpb   $0x0,(%eax)$/;"	l
a5	./init.asm	/^  a5:	eb 82                	jmp    0x29$/;"	l
a5	./ln.asm	/^  a5:	83 c2 01             	add    $0x1,%edx$/;"	l
a5	./mkdir.asm	/^  a5:	55                   	push   %ebp$/;"	l
a5	./rm.asm	/^  a5:	55                   	push   %ebp$/;"	l
a5	./wc.asm	/^  a5:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
a51	./usertests.asm	/^     a51:	f3 0f 1e fb          	endbr32 $/;"	l
a53	./sh.asm	/^ a53:	55                   	push   %ebp$/;"	l
a54	./sh.asm	/^ a54:	89 e5                	mov    %esp,%ebp$/;"	l
a55	./usertests.asm	/^     a55:	55                   	push   %ebp$/;"	l
a56	./sh.asm	/^ a56:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
a56	./usertests.asm	/^     a56:	89 e5                	mov    %esp,%ebp$/;"	l
a58	./usertests.asm	/^     a58:	57                   	push   %edi$/;"	l
a59	./sh.asm	/^ a59:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a59	./usertests.asm	/^     a59:	56                   	push   %esi$/;"	l
a5a	./usertests.asm	/^     a5a:	53                   	push   %ebx$/;"	l
a5b	./usertests.asm	/^     a5b:	83 ec 24             	sub    $0x24,%esp$/;"	l
a5e	./sh.asm	/^ a5e:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)$/;"	l
a5e	./usertests.asm	/^     a5e:	68 74 3f 00 00       	push   $0x3f74$/;"	l
a6	./date.asm	/^  a6:	0f b6 12             	movzbl (%edx),%edx$/;"	l
a6	./dup2test.asm	/^  a6:	6a 04                	push   $0x4$/;"	l
a6	./ls.asm	/^  a6:	53                   	push   %ebx$/;"	l
a6	./mkdir.asm	/^  a6:	89 e5                	mov    %esp,%ebp$/;"	l
a6	./rm.asm	/^  a6:	89 e5                	mov    %esp,%ebp$/;"	l
a6	./zombie.asm	/^  a6:	55                   	push   %ebp$/;"	l
a62	./sh.asm	/^ a62:	74 05                	je     0xa69$/;"	l
a63	./usertests.asm	/^     a63:	6a 01                	push   $0x1$/;"	l
a64	./sh.asm	/^ a64:	83 c0 01             	add    $0x1,%eax$/;"	l
a65	./usertests.asm	/^     a65:	e8 b9 2e 00 00       	call   0x3923$/;"	l
a67	./sh.asm	/^ a67:	eb f5                	jmp    0xa5e$/;"	l
a69	./sh.asm	/^ a69:	5d                   	pop    %ebp$/;"	l
a6a	./sh.asm	/^ a6a:	c3                   	ret    $/;"	l
a6a	./usertests.asm	/^     a6a:	e8 5b 2d 00 00       	call   0x37ca$/;"	l
a6b	./sh.asm	/^ a6b:	f3 0f 1e fb          	endbr32 $/;"	l
a6f	./sh.asm	/^ a6f:	55                   	push   %ebp$/;"	l
a6f	./usertests.asm	/^     a6f:	83 c4 10             	add    $0x10,%esp$/;"	l
a7	./echo.asm	/^  a7:	5d                   	pop    %ebp$/;"	l
a7	./forktest.asm	/^  a7:	e8 06 02 00 00       	call   0x2b2$/;"	l
a7	./init.asm	/^  a7:	83 ec 08             	sub    $0x8,%esp$/;"	l
a7	./kill.asm	/^  a7:	eb ed                	jmp    0x96$/;"	l
a7	./ls.asm	/^  a7:	e8 41 04 00 00       	call   0x4ed$/;"	l
a7	./sh.asm	/^  a7:	77 0d                	ja     0xb6$/;"	l
a7	./usertests.asm	/^      a7:	e8 77 38 00 00       	call   0x3923$/;"	l
a7	./zombie.asm	/^  a7:	89 e5                	mov    %esp,%ebp$/;"	l
a70	./sh.asm	/^ a70:	89 e5                	mov    %esp,%ebp$/;"	l
a72	./sh.asm	/^ a72:	57                   	push   %edi$/;"	l
a72	./usertests.asm	/^     a72:	85 c0                	test   %eax,%eax$/;"	l
a73	./sh.asm	/^ a73:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a74	./usertests.asm	/^     a74:	75 02                	jne    0xa78$/;"	l
a76	./sh.asm	/^ a76:	89 d7                	mov    %edx,%edi$/;"	l
a76	./usertests.asm	/^     a76:	eb fe                	jmp    0xa76$/;"	l
a78	./sh.asm	/^ a78:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
a78	./usertests.asm	/^     a78:	89 c7                	mov    %eax,%edi$/;"	l
a7a	./usertests.asm	/^     a7a:	e8 4b 2d 00 00       	call   0x37ca$/;"	l
a7b	./sh.asm	/^ a7b:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a7e	./sh.asm	/^ a7e:	fc                   	cld    $/;"	l
a7f	./sh.asm	/^ a7f:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a7f	./usertests.asm	/^     a7f:	89 c6                	mov    %eax,%esi$/;"	l
a8	./cat.asm	/^  a8:	83 ec 08             	sub    $0x8,%esp$/;"	l
a8	./dup2test.asm	/^  a8:	e8 b3 05 00 00       	call   0x660$/;"	l
a8	./echo.asm	/^  a8:	c3                   	ret    $/;"	l
a8	./grep.asm	/^  a8:	0f 94 c0             	sete   %al$/;"	l
a8	./ln.asm	/^  a8:	eb ed                	jmp    0x97$/;"	l
a8	./mkdir.asm	/^  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
a8	./rm.asm	/^  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
a8	./wc.asm	/^  a8:	68 4e 07 00 00       	push   $0x74e$/;"	l
a81	./sh.asm	/^ a81:	89 d0                	mov    %edx,%eax$/;"	l
a81	./usertests.asm	/^     a81:	85 c0                	test   %eax,%eax$/;"	l
a83	./sh.asm	/^ a83:	5f                   	pop    %edi$/;"	l
a83	./usertests.asm	/^     a83:	75 02                	jne    0xa87$/;"	l
a84	./sh.asm	/^ a84:	5d                   	pop    %ebp$/;"	l
a85	./sh.asm	/^ a85:	c3                   	ret    $/;"	l
a85	./usertests.asm	/^     a85:	eb fe                	jmp    0xa85$/;"	l
a86	./sh.asm	/^ a86:	f3 0f 1e fb          	endbr32 $/;"	l
a87	./usertests.asm	/^     a87:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a8a	./sh.asm	/^ a8a:	55                   	push   %ebp$/;"	l
a8a	./usertests.asm	/^     a8a:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
a8b	./sh.asm	/^ a8b:	89 e5                	mov    %esp,%ebp$/;"	l
a8d	./sh.asm	/^ a8d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a8d	./usertests.asm	/^     a8d:	50                   	push   %eax$/;"	l
a8e	./usertests.asm	/^     a8e:	e8 4f 2d 00 00       	call   0x37e2$/;"	l
a9	./date.asm	/^  a9:	29 d0                	sub    %edx,%eax$/;"	l
a9	./echo.asm	/^  a9:	f3 0f 1e fb          	endbr32 $/;"	l
a9	./kill.asm	/^  a9:	0f b6 c0             	movzbl %al,%eax$/;"	l
a9	./sh.asm	/^  a9:	3e ff 24 85 80 10 00 	notrack jmp *0x1080(,%eax,4)$/;"	l
a9	./stressfs.asm	/^  a9:	50                   	push   %eax$/;"	l
a9	./zombie.asm	/^  a9:	57                   	push   %edi$/;"	l
a90	./sh.asm	/^ a90:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx$/;"	l
a93	./usertests.asm	/^     a93:	e8 32 2d 00 00       	call   0x37ca$/;"	l
a94	./sh.asm	/^ a94:	0f b6 10             	movzbl (%eax),%edx$/;"	l
a97	./sh.asm	/^ a97:	84 d2                	test   %dl,%dl$/;"	l
a98	./usertests.asm	/^     a98:	89 c3                	mov    %eax,%ebx$/;"	l
a99	./sh.asm	/^ a99:	74 09                	je     0xaa4$/;"	l
a9a	./usertests.asm	/^     a9a:	83 c4 10             	add    $0x10,%esp$/;"	l
a9b	./sh.asm	/^ a9b:	38 ca                	cmp    %cl,%dl$/;"	l
a9d	./sh.asm	/^ a9d:	74 0a                	je     0xaa9$/;"	l
a9d	./usertests.asm	/^     a9d:	85 c0                	test   %eax,%eax$/;"	l
a9f	./sh.asm	/^ a9f:	83 c0 01             	add    $0x1,%eax$/;"	l
a9f	./usertests.asm	/^     a9f:	75 49                	jne    0xaea$/;"	l
aa	./init.asm	/^  aa:	68 c7 06 00 00       	push   $0x6c7$/;"	l
aa	./ln.asm	/^  aa:	0f b6 c0             	movzbl %al,%eax$/;"	l
aa	./stressfs.asm	/^  aa:	56                   	push   %esi$/;"	l
aa	./zombie.asm	/^  aa:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
aa1	./usertests.asm	/^     aa1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
aa2	./sh.asm	/^ aa2:	eb f0                	jmp    0xa94$/;"	l
aa4	./sh.asm	/^ aa4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
aa4	./usertests.asm	/^     aa4:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
aa7	./usertests.asm	/^     aa7:	e8 4e 2d 00 00       	call   0x37fa$/;"	l
aa9	./sh.asm	/^ aa9:	5d                   	pop    %ebp$/;"	l
aaa	./sh.asm	/^ aaa:	c3                   	ret    $/;"	l
aab	./sh.asm	/^ aab:	f3 0f 1e fb          	endbr32 $/;"	l
aac	./usertests.asm	/^     aac:	83 c4 0c             	add    $0xc,%esp$/;"	l
aaf	./sh.asm	/^ aaf:	55                   	push   %ebp$/;"	l
aaf	./usertests.asm	/^     aaf:	6a 01                	push   $0x1$/;"	l
ab	./cat.asm	/^  ab:	6a 00                	push   $0x0$/;"	l
ab	./date.asm	/^  ab:	5d                   	pop    %ebp$/;"	l
ab	./grep.asm	/^  ab:	0f b6 c0             	movzbl %al,%eax$/;"	l
ab	./mkdir.asm	/^  ab:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ab	./rm.asm	/^  ab:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ab	./stressfs.asm	/^  ab:	e8 4d 02 00 00       	call   0x2fd$/;"	l
ab0	./sh.asm	/^ ab0:	89 e5                	mov    %esp,%ebp$/;"	l
ab1	./usertests.asm	/^     ab1:	68 39 45 00 00       	push   $0x4539$/;"	l
ab2	./sh.asm	/^ ab2:	57                   	push   %edi$/;"	l
ab3	./sh.asm	/^ ab3:	56                   	push   %esi$/;"	l
ab4	./sh.asm	/^ ab4:	53                   	push   %ebx$/;"	l
ab5	./sh.asm	/^ ab5:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
ab6	./usertests.asm	/^     ab6:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
ab8	./sh.asm	/^ ab8:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
ab9	./usertests.asm	/^     ab9:	e8 34 2d 00 00       	call   0x37f2$/;"	l
abb	./sh.asm	/^ abb:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
abe	./usertests.asm	/^     abe:	83 c4 10             	add    $0x10,%esp$/;"	l
ac	./date.asm	/^  ac:	c3                   	ret    $/;"	l
ac	./forktest.asm	/^  ac:	e8 09 02 00 00       	call   0x2ba$/;"	l
ac	./kill.asm	/^  ac:	0f b6 12             	movzbl (%edx),%edx$/;"	l
ac	./ls.asm	/^  ac:	83 c4 10             	add    $0x10,%esp$/;"	l
ac	./usertests.asm	/^      ac:	e8 21 37 00 00       	call   0x37d2$/;"	l
ac0	./sh.asm	/^ ac0:	89 de                	mov    %ebx,%esi$/;"	l
ac1	./usertests.asm	/^     ac1:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ac2	./sh.asm	/^ ac2:	83 c3 01             	add    $0x1,%ebx$/;"	l
ac4	./usertests.asm	/^     ac4:	75 10                	jne    0xad6$/;"	l
ac5	./sh.asm	/^ ac5:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
ac6	./usertests.asm	/^     ac6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ac8	./sh.asm	/^ ac8:	7d 2e                	jge    0xaf8$/;"	l
ac9	./usertests.asm	/^     ac9:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
aca	./sh.asm	/^ aca:	83 ec 04             	sub    $0x4,%esp$/;"	l
acc	./usertests.asm	/^     acc:	e8 29 2d 00 00       	call   0x37fa$/;"	l
acd	./sh.asm	/^ acd:	6a 01                	push   $0x1$/;"	l
acf	./sh.asm	/^ acf:	8d 45 e7             	lea    -0x19(%ebp),%eax$/;"	l
acquire	./spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	./sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
ad	./cat.asm	/^  ad:	ff 37                	pushl  (%edi)$/;"	l
ad	./date.asm	/^  ad:	f3 0f 1e fb          	endbr32 $/;"	l
ad	./dup2test.asm	/^  ad:	83 c4 08             	add    $0x8,%esp$/;"	l
ad	./echo.asm	/^  ad:	55                   	push   %ebp$/;"	l
ad	./ln.asm	/^  ad:	0f b6 12             	movzbl (%edx),%edx$/;"	l
ad	./wc.asm	/^  ad:	6a 01                	push   $0x1$/;"	l
ad	./zombie.asm	/^  ad:	89 d7                	mov    %edx,%edi$/;"	l
ad1	./usertests.asm	/^     ad1:	83 c4 10             	add    $0x10,%esp$/;"	l
ad2	./sh.asm	/^ ad2:	50                   	push   %eax$/;"	l
ad3	./sh.asm	/^ ad3:	6a 00                	push   $0x0$/;"	l
ad4	./usertests.asm	/^     ad4:	eb fe                	jmp    0xad4$/;"	l
ad5	./sh.asm	/^ ad5:	e8 f6 00 00 00       	call   0xbd0$/;"	l
ad6	./usertests.asm	/^     ad6:	83 ec 08             	sub    $0x8,%esp$/;"	l
ad9	./usertests.asm	/^     ad9:	68 7e 3f 00 00       	push   $0x3f7e$/;"	l
ada	./sh.asm	/^ ada:	83 c4 10             	add    $0x10,%esp$/;"	l
add	./sh.asm	/^ add:	85 c0                	test   %eax,%eax$/;"	l
addr	./kernel.asm	/^  addr = P2V(a);$/;"	d
addr	./kernel.asm	/^  addr = myproc()->sz;$/;"	d
addr	./mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	./file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	./fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
ade	./usertests.asm	/^     ade:	6a 01                	push   $0x1$/;"	l
adf	./sh.asm	/^ adf:	7e 17                	jle    0xaf8$/;"	l
ae	./echo.asm	/^  ae:	89 e5                	mov    %esp,%ebp$/;"	l
ae	./grep.asm	/^  ae:	eb 1d                	jmp    0xcd$/;"	l
ae	./mkdir.asm	/^  ae:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
ae	./rm.asm	/^  ae:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
ae0	./usertests.asm	/^     ae0:	e8 3e 2e 00 00       	call   0x3923$/;"	l
ae1	./sh.asm	/^ ae1:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax$/;"	l
ae5	./sh.asm	/^ ae5:	88 04 37             	mov    %al,(%edi,%esi,1)$/;"	l
ae5	./usertests.asm	/^     ae5:	83 c4 10             	add    $0x10,%esp$/;"	l
ae8	./sh.asm	/^ ae8:	3c 0a                	cmp    $0xa,%al$/;"	l
ae8	./usertests.asm	/^     ae8:	eb dc                	jmp    0xac6$/;"	l
aea	./sh.asm	/^ aea:	0f 94 c2             	sete   %dl$/;"	l
aea	./usertests.asm	/^     aea:	83 ec 0c             	sub    $0xc,%esp$/;"	l
aed	./sh.asm	/^ aed:	3c 0d                	cmp    $0xd,%al$/;"	l
aed	./usertests.asm	/^     aed:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
aef	./sh.asm	/^ aef:	0f 94 c0             	sete   %al$/;"	l
af	./cat.asm	/^  af:	e8 49 02 00 00       	call   0x2fd$/;"	l
af	./init.asm	/^  af:	6a 01                	push   $0x1$/;"	l
af	./kill.asm	/^  af:	29 d0                	sub    %edx,%eax$/;"	l
af	./ls.asm	/^  af:	85 c0                	test   %eax,%eax$/;"	l
af	./wc.asm	/^  af:	e8 c4 03 00 00       	call   0x478$/;"	l
af	./zombie.asm	/^  af:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
af0	./usertests.asm	/^     af0:	e8 05 2d 00 00       	call   0x37fa$/;"	l
af2	./sh.asm	/^ af2:	08 c2                	or     %al,%dl$/;"	l
af4	./sh.asm	/^ af4:	74 ca                	je     0xac0$/;"	l
af5	./usertests.asm	/^     af5:	83 c4 0c             	add    $0xc,%esp$/;"	l
af6	./sh.asm	/^ af6:	89 de                	mov    %ebx,%esi$/;"	l
af8	./sh.asm	/^ af8:	c6 04 37 00          	movb   $0x0,(%edi,%esi,1)$/;"	l
af8	./usertests.asm	/^     af8:	68 00 20 00 00       	push   $0x2000$/;"	l
afc	./sh.asm	/^ afc:	89 f8                	mov    %edi,%eax$/;"	l
afd	./usertests.asm	/^     afd:	68 00 84 00 00       	push   $0x8400$/;"	l
afe	./sh.asm	/^ afe:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
align	./elf.h	/^  uint align;$/;"	m	struct:proghdr
allocproc	./proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	./vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	./kernel.asm	/^alltraps:$/;"	l
alltraps	./trapasm.S	/^alltraps:$/;"	l
apicid	./kernel.asm	/^  apicid = lapicid();$/;"	d
apicid	./mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	./proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	./mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argfd	./sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	./syscall.c	/^argint(int n, int *ip)$/;"	f
argp	./kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptest	./usertests.c	/^void argptest()$/;"	f
argptr	./syscall.c	/^argptr(int n, void **pp, int size)$/;"	f
args	./mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	./syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	./init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	./initcode.S	/^argv:$/;"	l
argv	./sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	./ulib.c	/^atoi(const char *s)$/;"	f
avl	./mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	./date.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./dup2test.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./echo.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./forktest.asm	/^   b:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
b	./init.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	./kill.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./ln.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./mkdir.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./rm.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./stressfs.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b	./zombie.asm	/^   b:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
b0	./dup2test.asm	/^  b0:	6a 06                	push   $0x6$/;"	l
b0	./echo.asm	/^  b0:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b0	./grep.asm	/^  b0:	83 ec 08             	sub    $0x8,%esp$/;"	l
b0	./ln.asm	/^  b0:	29 d0                	sub    %edx,%eax$/;"	l
b0	./sh.asm	/^  b0:	00 $/;"	l
b0	./stressfs.asm	/^  b0:	83 c3 01             	add    $0x1,%ebx$/;"	l
b01	./sh.asm	/^ b01:	5b                   	pop    %ebx$/;"	l
b02	./sh.asm	/^ b02:	5e                   	pop    %esi$/;"	l
b02	./usertests.asm	/^     b02:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
b03	./sh.asm	/^ b03:	5f                   	pop    %edi$/;"	l
b04	./sh.asm	/^ b04:	5d                   	pop    %ebp$/;"	l
b05	./sh.asm	/^ b05:	c3                   	ret    $/;"	l
b05	./usertests.asm	/^     b05:	e8 e0 2c 00 00       	call   0x37ea$/;"	l
b06	./sh.asm	/^ b06:	f3 0f 1e fb          	endbr32 $/;"	l
b0a	./sh.asm	/^ b0a:	55                   	push   %ebp$/;"	l
b0a	./usertests.asm	/^     b0a:	83 c4 10             	add    $0x10,%esp$/;"	l
b0b	./sh.asm	/^ b0b:	89 e5                	mov    %esp,%ebp$/;"	l
b0d	./sh.asm	/^ b0d:	56                   	push   %esi$/;"	l
b0d	./usertests.asm	/^     b0d:	83 f8 01             	cmp    $0x1,%eax$/;"	l
b0e	./sh.asm	/^ b0e:	53                   	push   %ebx$/;"	l
b0f	./sh.asm	/^ b0f:	83 ec 08             	sub    $0x8,%esp$/;"	l
b1	./date.asm	/^  b1:	55                   	push   %ebp$/;"	l
b1	./forktest.asm	/^  b1:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
b1	./init.asm	/^  b1:	e8 39 03 00 00       	call   0x3ef$/;"	l
b1	./kill.asm	/^  b1:	5d                   	pop    %ebp$/;"	l
b1	./ls.asm	/^  b1:	0f 88 8c 00 00 00    	js     0x143$/;"	l
b1	./mkdir.asm	/^  b1:	84 c0                	test   %al,%al$/;"	l
b1	./rm.asm	/^  b1:	84 c0                	test   %al,%al$/;"	l
b1	./sh.asm	/^  b1:	e8 02 0b 00 00       	call   0xbb8$/;"	l
b1	./usertests.asm	/^      b1:	83 ec 08             	sub    $0x8,%esp$/;"	l
b10	./usertests.asm	/^     b10:	74 1a                	je     0xb2c$/;"	l
b12	./sh.asm	/^ b12:	6a 00                	push   $0x0$/;"	l
b12	./usertests.asm	/^     b12:	83 ec 08             	sub    $0x8,%esp$/;"	l
b14	./sh.asm	/^ b14:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
b15	./usertests.asm	/^     b15:	68 92 3f 00 00       	push   $0x3f92$/;"	l
b17	./sh.asm	/^ b17:	e8 dc 00 00 00       	call   0xbf8$/;"	l
b1a	./usertests.asm	/^     b1a:	6a 01                	push   $0x1$/;"	l
b1c	./sh.asm	/^ b1c:	83 c4 10             	add    $0x10,%esp$/;"	l
b1c	./usertests.asm	/^     b1c:	e8 02 2e 00 00       	call   0x3923$/;"	l
b1f	./sh.asm	/^ b1f:	85 c0                	test   %eax,%eax$/;"	l
b2	./date.asm	/^  b2:	89 e5                	mov    %esp,%ebp$/;"	l
b2	./dup2test.asm	/^  b2:	6a 04                	push   $0x4$/;"	l
b2	./kill.asm	/^  b2:	c3                   	ret    $/;"	l
b2	./ln.asm	/^  b2:	5d                   	pop    %ebp$/;"	l
b2	./zombie.asm	/^  b2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b21	./sh.asm	/^ b21:	78 24                	js     0xb47$/;"	l
b21	./usertests.asm	/^     b21:	83 c4 10             	add    $0x10,%esp$/;"	l
b23	./sh.asm	/^ b23:	89 c3                	mov    %eax,%ebx$/;"	l
b24	./usertests.asm	/^     b24:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
b25	./sh.asm	/^ b25:	83 ec 08             	sub    $0x8,%esp$/;"	l
b27	./usertests.asm	/^     b27:	5b                   	pop    %ebx$/;"	l
b28	./sh.asm	/^ b28:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
b28	./usertests.asm	/^     b28:	5e                   	pop    %esi$/;"	l
b29	./usertests.asm	/^     b29:	5f                   	pop    %edi$/;"	l
b2a	./usertests.asm	/^     b2a:	5d                   	pop    %ebp$/;"	l
b2b	./sh.asm	/^ b2b:	50                   	push   %eax$/;"	l
b2b	./usertests.asm	/^     b2b:	c3                   	ret    $/;"	l
b2c	./sh.asm	/^ b2c:	e8 df 00 00 00       	call   0xc10$/;"	l
b2c	./usertests.asm	/^     b2c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b2f	./usertests.asm	/^     b2f:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
b3	./echo.asm	/^  b3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b3	./grep.asm	/^  b3:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b3	./kill.asm	/^  b3:	f3 0f 1e fb          	endbr32 $/;"	l
b3	./ln.asm	/^  b3:	c3                   	ret    $/;"	l
b3	./mkdir.asm	/^  b3:	74 0c                	je     0xc1$/;"	l
b3	./rm.asm	/^  b3:	74 0c                	je     0xc1$/;"	l
b3	./stressfs.asm	/^  b3:	83 c4 10             	add    $0x10,%esp$/;"	l
b31	./sh.asm	/^ b31:	89 c6                	mov    %eax,%esi$/;"	l
b32	./usertests.asm	/^     b32:	e8 c3 2c 00 00       	call   0x37fa$/;"	l
b33	./sh.asm	/^ b33:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b36	./sh.asm	/^ b36:	e8 a5 00 00 00       	call   0xbe0$/;"	l
b37	./usertests.asm	/^     b37:	83 c4 08             	add    $0x8,%esp$/;"	l
b3a	./usertests.asm	/^     b3a:	68 a5 3f 00 00       	push   $0x3fa5$/;"	l
b3b	./sh.asm	/^ b3b:	83 c4 10             	add    $0x10,%esp$/;"	l
b3e	./sh.asm	/^ b3e:	89 f0                	mov    %esi,%eax$/;"	l
b3f	./usertests.asm	/^     b3f:	6a 01                	push   $0x1$/;"	l
b4	./cat.asm	/^  b4:	89 c3                	mov    %eax,%ebx$/;"	l
b4	./date.asm	/^  b4:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b4	./dup2test.asm	/^  b4:	e8 fe 04 00 00       	call   0x5b7$/;"	l
b4	./forktest.asm	/^  b4:	75 17                	jne    0xcd$/;"	l
b4	./ln.asm	/^  b4:	f3 0f 1e fb          	endbr32 $/;"	l
b4	./usertests.asm	/^      b4:	68 0f 3c 00 00       	push   $0x3c0f$/;"	l
b4	./wc.asm	/^  b4:	83 c4 20             	add    $0x20,%esp$/;"	l
b40	./sh.asm	/^ b40:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
b41	./usertests.asm	/^     b41:	e8 dd 2d 00 00       	call   0x3923$/;"	l
b43	./sh.asm	/^ b43:	5b                   	pop    %ebx$/;"	l
b44	./sh.asm	/^ b44:	5e                   	pop    %esi$/;"	l
b45	./sh.asm	/^ b45:	5d                   	pop    %ebp$/;"	l
b46	./sh.asm	/^ b46:	c3                   	ret    $/;"	l
b46	./usertests.asm	/^     b46:	89 3c 24             	mov    %edi,(%esp)$/;"	l
b47	./sh.asm	/^ b47:	be ff ff ff ff       	mov    $0xffffffff,%esi$/;"	l
b49	./usertests.asm	/^     b49:	e8 b4 2c 00 00       	call   0x3802$/;"	l
b4c	./sh.asm	/^ b4c:	eb f0                	jmp    0xb3e$/;"	l
b4e	./sh.asm	/^ b4e:	f3 0f 1e fb          	endbr32 $/;"	l
b4e	./usertests.asm	/^     b4e:	89 34 24             	mov    %esi,(%esp)$/;"	l
b5	./mkdir.asm	/^  b5:	3a 02                	cmp    (%edx),%al$/;"	l
b5	./rm.asm	/^  b5:	3a 02                	cmp    (%edx),%al$/;"	l
b5	./zombie.asm	/^  b5:	fc                   	cld    $/;"	l
b51	./usertests.asm	/^     b51:	e8 ac 2c 00 00       	call   0x3802$/;"	l
b52	./sh.asm	/^ b52:	55                   	push   %ebp$/;"	l
b53	./sh.asm	/^ b53:	89 e5                	mov    %esp,%ebp$/;"	l
b55	./sh.asm	/^ b55:	53                   	push   %ebx$/;"	l
b56	./sh.asm	/^ b56:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b56	./usertests.asm	/^     b56:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b59	./sh.asm	/^ b59:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b59	./usertests.asm	/^     b59:	e8 a4 2c 00 00       	call   0x3802$/;"	l
b5e	./sh.asm	/^ b5e:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
b5e	./usertests.asm	/^     b5e:	83 c4 08             	add    $0x8,%esp$/;"	l
b6	./cat.asm	/^  b6:	83 c4 10             	add    $0x10,%esp$/;"	l
b6	./forktest.asm	/^  b6:	83 ec 08             	sub    $0x8,%esp$/;"	l
b6	./grep.asm	/^  b6:	83 c0 01             	add    $0x1,%eax$/;"	l
b6	./init.asm	/^  b6:	e8 e3 01 00 00       	call   0x29e$/;"	l
b6	./sh.asm	/^  b6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b6	./stressfs.asm	/^  b6:	83 fb 13             	cmp    $0x13,%ebx$/;"	l
b6	./zombie.asm	/^  b6:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
b61	./sh.asm	/^ b61:	8d 58 d0             	lea    -0x30(%eax),%ebx$/;"	l
b61	./usertests.asm	/^     b61:	68 ae 3f 00 00       	push   $0x3fae$/;"	l
b64	./sh.asm	/^ b64:	80 fb 09             	cmp    $0x9,%bl$/;"	l
b66	./usertests.asm	/^     b66:	6a 01                	push   $0x1$/;"	l
b67	./sh.asm	/^ b67:	77 12                	ja     0xb7b$/;"	l
b68	./usertests.asm	/^     b68:	e8 b6 2d 00 00       	call   0x3923$/;"	l
b69	./sh.asm	/^ b69:	8d 1c 92             	lea    (%edx,%edx,4),%ebx$/;"	l
b6c	./sh.asm	/^ b6c:	8d 14 1b             	lea    (%ebx,%ebx,1),%edx$/;"	l
b6d	./usertests.asm	/^     b6d:	e8 68 2c 00 00       	call   0x37da$/;"	l
b6f	./sh.asm	/^ b6f:	83 c1 01             	add    $0x1,%ecx$/;"	l
b7	./date.asm	/^  b7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b7	./kill.asm	/^  b7:	55                   	push   %ebp$/;"	l
b7	./ls.asm	/^  b7:	89 c7                	mov    %eax,%edi$/;"	l
b7	./mkdir.asm	/^  b7:	75 08                	jne    0xc1$/;"	l
b7	./rm.asm	/^  b7:	75 08                	jne    0xc1$/;"	l
b7	./wc.asm	/^  b7:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
b72	./sh.asm	/^ b72:	0f be c0             	movsbl %al,%eax$/;"	l
b72	./usertests.asm	/^     b72:	e8 63 2c 00 00       	call   0x37da$/;"	l
b75	./sh.asm	/^ b75:	8d 54 10 d0          	lea    -0x30(%eax,%edx,1),%edx$/;"	l
b77	./usertests.asm	/^     b77:	e8 5e 2c 00 00       	call   0x37da$/;"	l
b79	./sh.asm	/^ b79:	eb e3                	jmp    0xb5e$/;"	l
b7b	./sh.asm	/^ b7b:	89 d0                	mov    %edx,%eax$/;"	l
b7c	./usertests.asm	/^     b7c:	83 c4 08             	add    $0x8,%esp$/;"	l
b7d	./sh.asm	/^ b7d:	5b                   	pop    %ebx$/;"	l
b7e	./sh.asm	/^ b7e:	5d                   	pop    %ebp$/;"	l
b7f	./sh.asm	/^ b7f:	c3                   	ret    $/;"	l
b7f	./usertests.asm	/^     b7f:	68 b7 3f 00 00       	push   $0x3fb7$/;"	l
b8	./echo.asm	/^  b8:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)$/;"	l
b8	./kill.asm	/^  b8:	89 e5                	mov    %esp,%ebp$/;"	l
b8	./ln.asm	/^  b8:	55                   	push   %ebp$/;"	l
b8	./zombie.asm	/^  b8:	89 d0                	mov    %edx,%eax$/;"	l
b80	./sh.asm	/^ b80:	f3 0f 1e fb          	endbr32 $/;"	l
b84	./sh.asm	/^ b84:	55                   	push   %ebp$/;"	l
b84	./usertests.asm	/^     b84:	6a 01                	push   $0x1$/;"	l
b85	./sh.asm	/^ b85:	89 e5                	mov    %esp,%ebp$/;"	l
b86	./usertests.asm	/^     b86:	e8 98 2d 00 00       	call   0x3923$/;"	l
b87	./sh.asm	/^ b87:	56                   	push   %esi$/;"	l
b88	./sh.asm	/^ b88:	53                   	push   %ebx$/;"	l
b89	./sh.asm	/^ b89:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
b8b	./usertests.asm	/^     b8b:	83 c4 10             	add    $0x10,%esp$/;"	l
b8c	./sh.asm	/^ b8c:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b8e	./usertests.asm	/^     b8e:	eb 94                	jmp    0xb24$/;"	l
b8f	./sh.asm	/^ b8f:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
b9	./cat.asm	/^  b9:	85 c0                	test   %eax,%eax$/;"	l
b9	./dup2test.asm	/^  b9:	83 c4 10             	add    $0x10,%esp$/;"	l
b9	./forktest.asm	/^  b9:	68 96 03 00 00       	push   $0x396$/;"	l
b9	./grep.asm	/^  b9:	50                   	push   %eax$/;"	l
b9	./ln.asm	/^  b9:	89 e5                	mov    %esp,%ebp$/;"	l
b9	./ls.asm	/^  b9:	83 ec 08             	sub    $0x8,%esp$/;"	l
b9	./mkdir.asm	/^  b9:	83 c1 01             	add    $0x1,%ecx$/;"	l
b9	./rm.asm	/^  b9:	83 c1 01             	add    $0x1,%ecx$/;"	l
b9	./sh.asm	/^  b9:	68 d0 0f 00 00       	push   $0xfd0$/;"	l
b9	./stressfs.asm	/^  b9:	7e e0                	jle    0x9b$/;"	l
b9	./usertests.asm	/^      b9:	ff 35 10 5c 00 00    	pushl  0x5c10$/;"	l
b90	./usertests.asm	/^     b90:	f3 0f 1e fb          	endbr32 $/;"	l
b92	./sh.asm	/^ b92:	89 f2                	mov    %esi,%edx$/;"	l
b94	./sh.asm	/^ b94:	8d 58 ff             	lea    -0x1(%eax),%ebx$/;"	l
b94	./usertests.asm	/^     b94:	55                   	push   %ebp$/;"	l
b95	./usertests.asm	/^     b95:	89 e5                	mov    %esp,%ebp$/;"	l
b97	./sh.asm	/^ b97:	85 c0                	test   %eax,%eax$/;"	l
b97	./usertests.asm	/^     b97:	56                   	push   %esi$/;"	l
b98	./usertests.asm	/^     b98:	53                   	push   %ebx$/;"	l
b99	./sh.asm	/^ b99:	7e 0f                	jle    0xbaa$/;"	l
b99	./usertests.asm	/^     b99:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
b9b	./sh.asm	/^ b9b:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
b9e	./sh.asm	/^ b9e:	88 02                	mov    %al,(%edx)$/;"	l
b9e	./usertests.asm	/^     b9e:	eb 21                	jmp    0xbc1$/;"	l
ba	./grep.asm	/^  ba:	83 c2 01             	add    $0x1,%edx$/;"	l
ba	./kill.asm	/^  ba:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
ba	./wc.asm	/^  ba:	5b                   	pop    %ebx$/;"	l
ba	./zombie.asm	/^  ba:	5f                   	pop    %edi$/;"	l
ba0	./sh.asm	/^ ba0:	8d 49 01             	lea    0x1(%ecx),%ecx$/;"	l
ba0	./usertests.asm	/^     ba0:	83 ec 08             	sub    $0x8,%esp$/;"	l
ba3	./sh.asm	/^ ba3:	8d 52 01             	lea    0x1(%edx),%edx$/;"	l
ba3	./usertests.asm	/^     ba3:	68 21 4b 00 00       	push   $0x4b21$/;"	l
ba6	./sh.asm	/^ ba6:	89 d8                	mov    %ebx,%eax$/;"	l
ba8	./sh.asm	/^ ba8:	eb ea                	jmp    0xb94$/;"	l
ba8	./usertests.asm	/^     ba8:	6a 01                	push   $0x1$/;"	l
baa	./sh.asm	/^ baa:	89 f0                	mov    %esi,%eax$/;"	l
baa	./usertests.asm	/^     baa:	e8 74 2d 00 00       	call   0x3923$/;"	l
bac	./sh.asm	/^ bac:	5b                   	pop    %ebx$/;"	l
backcmd	./sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	./sh.c	/^struct backcmd {$/;"	s	file:
bad	./kernel.asm	/^ bad:$/;"	l
bad	./kernel.asm	/^bad:$/;"	l
bad	./sh.asm	/^ bad:	5e                   	pop    %esi$/;"	l
bae	./sh.asm	/^ bae:	5d                   	pop    %ebp$/;"	l
baf	./sh.asm	/^ baf:	c3                   	ret    $/;"	l
baf	./usertests.asm	/^     baf:	83 c4 10             	add    $0x10,%esp$/;"	l
balloc	./fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	./mkfs.c	/^balloc(int used)$/;"	f
base	./umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	./mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	./mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	./mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	./cat.asm	/^  bb:	78 28                	js     0xe5$/;"	l
bb	./init.asm	/^  bb:	83 ec 08             	sub    $0x8,%esp$/;"	l
bb	./ln.asm	/^  bb:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
bb	./stressfs.asm	/^  bb:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bb	./wc.asm	/^  bb:	5e                   	pop    %esi$/;"	l
bb	./zombie.asm	/^  bb:	5d                   	pop    %ebp$/;"	l
bb0	./sh.asm	/^ bb0:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
bb2	./usertests.asm	/^     bb2:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
bb5	./sh.asm	/^ bb5:	cd 40                	int    $0x40$/;"	l
bb5	./usertests.asm	/^     bb5:	5b                   	pop    %ebx$/;"	l
bb6	./usertests.asm	/^     bb6:	5e                   	pop    %esi$/;"	l
bb7	./sh.asm	/^ bb7:	c3                   	ret    $/;"	l
bb7	./usertests.asm	/^     bb7:	5d                   	pop    %ebp$/;"	l
bb8	./sh.asm	/^ bb8:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
bb8	./usertests.asm	/^     bb8:	c3                   	ret    $/;"	l
bb9	./usertests.asm	/^     bb9:	e8 14 2c 00 00       	call   0x37d2$/;"	l
bbd	./sh.asm	/^ bbd:	cd 40                	int    $0x40$/;"	l
bbe	./usertests.asm	/^     bbe:	83 c6 01             	add    $0x1,%esi$/;"	l
bbf	./sh.asm	/^ bbf:	c3                   	ret    $/;"	l
bc	./date.asm	/^  bc:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)$/;"	l
bc	./dup2test.asm	/^  bc:	83 f8 06             	cmp    $0x6,%eax$/;"	l
bc	./echo.asm	/^  bc:	74 05                	je     0xc3$/;"	l
bc	./ls.asm	/^  bc:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax$/;"	l
bc	./mkdir.asm	/^  bc:	83 c2 01             	add    $0x1,%edx$/;"	l
bc	./rm.asm	/^  bc:	83 c2 01             	add    $0x1,%edx$/;"	l
bc	./wc.asm	/^  bc:	5f                   	pop    %edi$/;"	l
bc	./zombie.asm	/^  bc:	c3                   	ret    $/;"	l
bc0	./sh.asm	/^ bc0:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
bc1	./usertests.asm	/^     bc1:	83 fe 63             	cmp    $0x63,%esi$/;"	l
bc4	./usertests.asm	/^     bc4:	7f 2a                	jg     0xbf0$/;"	l
bc5	./sh.asm	/^ bc5:	cd 40                	int    $0x40$/;"	l
bc6	./usertests.asm	/^     bc6:	e8 ff 2b 00 00       	call   0x37ca$/;"	l
bc7	./sh.asm	/^ bc7:	c3                   	ret    $/;"	l
bc8	./sh.asm	/^ bc8:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
bcache	./bio.c	/^} bcache;$/;"	v	typeref:struct:__anon1
bcb	./usertests.asm	/^     bcb:	89 c3                	mov    %eax,%ebx$/;"	l
bcd	./kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	./sh.asm	/^ bcd:	cd 40                	int    $0x40$/;"	l
bcd	./usertests.asm	/^     bcd:	85 c0                	test   %eax,%eax$/;"	l
bcf	./sh.asm	/^ bcf:	c3                   	ret    $/;"	l
bcf	./usertests.asm	/^     bcf:	78 cf                	js     0xba0$/;"	l
bd	./cat.asm	/^  bd:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bd	./grep.asm	/^  bd:	52                   	push   %edx$/;"	l
bd	./kill.asm	/^  bd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bd	./wc.asm	/^  bd:	5d                   	pop    %ebp$/;"	l
bd	./zombie.asm	/^  bd:	f3 0f 1e fb          	endbr32 $/;"	l
bd0	./sh.asm	/^ bd0:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
bd1	./usertests.asm	/^     bd1:	74 e6                	je     0xbb9$/;"	l
bd3	./usertests.asm	/^     bd3:	e8 02 2c 00 00       	call   0x37da$/;"	l
bd5	./sh.asm	/^ bd5:	cd 40                	int    $0x40$/;"	l
bd7	./sh.asm	/^ bd7:	c3                   	ret    $/;"	l
bd8	./sh.asm	/^ bd8:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
bd8	./usertests.asm	/^     bd8:	39 d8                	cmp    %ebx,%eax$/;"	l
bda	./kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	./usertests.asm	/^     bda:	74 e2                	je     0xbbe$/;"	l
bdc	./usertests.asm	/^     bdc:	83 ec 08             	sub    $0x8,%esp$/;"	l
bdd	./sh.asm	/^ bdd:	cd 40                	int    $0x40$/;"	l
bdf	./sh.asm	/^ bdf:	c3                   	ret    $/;"	l
bdf	./usertests.asm	/^     bdf:	68 c3 3f 00 00       	push   $0x3fc3$/;"	l
be	./echo.asm	/^  be:	83 c0 01             	add    $0x1,%eax$/;"	l
be	./forktest.asm	/^  be:	6a 01                	push   $0x1$/;"	l
be	./grep.asm	/^  be:	e8 89 ff ff ff       	call   0x4c$/;"	l
be	./init.asm	/^  be:	68 a8 09 00 00       	push   $0x9a8$/;"	l
be	./ln.asm	/^  be:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
be	./sh.asm	/^  be:	e8 8c ff ff ff       	call   0x4f$/;"	l
be	./stressfs.asm	/^  be:	56                   	push   %esi$/;"	l
be	./wc.asm	/^  be:	c3                   	ret    $/;"	l
be0	./sh.asm	/^ be0:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
be4	./usertests.asm	/^     be4:	6a 01                	push   $0x1$/;"	l
be5	./sh.asm	/^ be5:	cd 40                	int    $0x40$/;"	l
be6	./usertests.asm	/^     be6:	e8 38 2d 00 00       	call   0x3923$/;"	l
be7	./sh.asm	/^ be7:	c3                   	ret    $/;"	l
be8	./sh.asm	/^ be8:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
beb	./usertests.asm	/^     beb:	83 c4 10             	add    $0x10,%esp$/;"	l
bed	./sh.asm	/^ bed:	cd 40                	int    $0x40$/;"	l
bee	./usertests.asm	/^     bee:	eb c2                	jmp    0xbb2$/;"	l
bef	./sh.asm	/^ bef:	c3                   	ret    $/;"	l
begin_op	./log.c	/^begin_op(void)$/;"	f
bf	./dup2test.asm	/^  bf:	0f 85 d5 01 00 00    	jne    0x29a$/;"	l
bf	./mkdir.asm	/^  bf:	eb ed                	jmp    0xae$/;"	l
bf	./rm.asm	/^  bf:	eb ed                	jmp    0xae$/;"	l
bf	./stressfs.asm	/^  bf:	e8 41 02 00 00       	call   0x305$/;"	l
bf	./usertests.asm	/^      bf:	e8 5f 38 00 00       	call   0x3923$/;"	l
bf	./wc.asm	/^  bf:	83 ec 08             	sub    $0x8,%esp$/;"	l
bf0	./sh.asm	/^ bf0:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
bf0	./usertests.asm	/^     bf0:	83 ec 08             	sub    $0x8,%esp$/;"	l
bf3	./usertests.asm	/^     bf3:	68 d3 3f 00 00       	push   $0x3fd3$/;"	l
bf5	./sh.asm	/^ bf5:	cd 40                	int    $0x40$/;"	l
bf7	./sh.asm	/^ bf7:	c3                   	ret    $/;"	l
bf8	./sh.asm	/^ bf8:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
bf8	./usertests.asm	/^     bf8:	6a 01                	push   $0x1$/;"	l
bfa	./usertests.asm	/^     bfa:	e8 24 2d 00 00       	call   0x3923$/;"	l
bfd	./sh.asm	/^ bfd:	cd 40                	int    $0x40$/;"	l
bff	./sh.asm	/^ bff:	c3                   	ret    $/;"	l
bff	./usertests.asm	/^     bff:	83 c4 10             	add    $0x10,%esp$/;"	l
bfree	./fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	./bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bi	./kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	./usertests.c	/^bigargtest(void)$/;"	f
bigdir	./usertests.c	/^bigdir(void)$/;"	f
bigfile	./usertests.c	/^bigfile(void)$/;"	f
bigwrite	./usertests.c	/^bigwrite(void)$/;"	f
binit	./bio.c	/^binit(void)$/;"	f
block	./log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	./buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	./fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	./fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bootmain	./bootmain.c	/^bootmain(void)$/;"	f
bp	./kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	./kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	./kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	./kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	./kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	./kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	./kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	./kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	./kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	./kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bread	./bio.c	/^bread(uint dev, uint blockno)$/;"	f
brelse	./bio.c	/^brelse(struct buf *b)$/;"	f
bsstest	./usertests.c	/^bsstest(void)$/;"	f
buf	./bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
buf	./buf.h	/^struct buf {$/;"	s
buf	./cat.c	/^char buf[512];$/;"	v
buf	./console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon3	file:
buf	./grep.c	/^char buf[1024];$/;"	v
buf	./kernel.asm	/^  buf = (char*)p;$/;"	d
buf	./usertests.c	/^char buf[8192];$/;"	v
buf	./wc.c	/^char buf[512];$/;"	v
bwrite	./bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	./fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	./cat.asm	/^   c:	83 ec 04             	sub    $0x4,%esp$/;"	l
c	./initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	./kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	./kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	./kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	./kernel.asm	/^  c = &cpus[cpuid()];$/;"	d
c	./kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	./kernel.asm	/^  c = mycpu();$/;"	d
c	./ls.asm	/^   c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c	./sh.asm	/^   c:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
c0	./cat.asm	/^  c0:	50                   	push   %eax$/;"	l
c0	./date.asm	/^  c0:	74 05                	je     0xc7$/;"	l
c0	./forktest.asm	/^  c0:	e8 3b ff ff ff       	call   0x0$/;"	l
c00	./sh.asm	/^ c00:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
c02	./usertests.asm	/^     c02:	eb ae                	jmp    0xbb2$/;"	l
c04	./usertests.asm	/^     c04:	f3 0f 1e fb          	endbr32 $/;"	l
c05	./sh.asm	/^ c05:	cd 40                	int    $0x40$/;"	l
c07	./sh.asm	/^ c07:	c3                   	ret    $/;"	l
c08	./sh.asm	/^ c08:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
c08	./usertests.asm	/^     c08:	55                   	push   %ebp$/;"	l
c09	./usertests.asm	/^     c09:	89 e5                	mov    %esp,%ebp$/;"	l
c0b	./usertests.asm	/^     c0b:	57                   	push   %edi$/;"	l
c0c	./usertests.asm	/^     c0c:	56                   	push   %esi$/;"	l
c0d	./sh.asm	/^ c0d:	cd 40                	int    $0x40$/;"	l
c0d	./usertests.asm	/^     c0d:	53                   	push   %ebx$/;"	l
c0e	./usertests.asm	/^     c0e:	83 ec 14             	sub    $0x14,%esp$/;"	l
c0f	./sh.asm	/^ c0f:	c3                   	ret    $/;"	l
c1	./cat.asm	/^  c1:	e8 3a ff ff ff       	call   0x0$/;"	l
c1	./echo.asm	/^  c1:	eb f5                	jmp    0xb8$/;"	l
c1	./mkdir.asm	/^  c1:	0f b6 c0             	movzbl %al,%eax$/;"	l
c1	./rm.asm	/^  c1:	0f b6 c0             	movzbl %al,%eax$/;"	l
c1	./zombie.asm	/^  c1:	55                   	push   %ebp$/;"	l
c10	./sh.asm	/^ c10:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
c11	./usertests.asm	/^     c11:	68 e0 3f 00 00       	push   $0x3fe0$/;"	l
c15	./sh.asm	/^ c15:	cd 40                	int    $0x40$/;"	l
c16	./usertests.asm	/^     c16:	6a 01                	push   $0x1$/;"	l
c17	./sh.asm	/^ c17:	c3                   	ret    $/;"	l
c18	./sh.asm	/^ c18:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
c18	./usertests.asm	/^     c18:	e8 06 2d 00 00       	call   0x3923$/;"	l
c1d	./sh.asm	/^ c1d:	cd 40                	int    $0x40$/;"	l
c1d	./usertests.asm	/^     c1d:	e8 30 2c 00 00       	call   0x3852$/;"	l
c1f	./sh.asm	/^ c1f:	c3                   	ret    $/;"	l
c2	./date.asm	/^  c2:	83 c0 01             	add    $0x1,%eax$/;"	l
c2	./kill.asm	/^  c2:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)$/;"	l
c2	./ls.asm	/^  c2:	50                   	push   %eax$/;"	l
c2	./wc.asm	/^  c2:	68 3e 07 00 00       	push   $0x73e$/;"	l
c2	./zombie.asm	/^  c2:	89 e5                	mov    %esp,%ebp$/;"	l
c20	./sh.asm	/^ c20:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
c22	./usertests.asm	/^     c22:	89 c6                	mov    %eax,%esi$/;"	l
c24	./usertests.asm	/^     c24:	e8 a1 2b 00 00       	call   0x37ca$/;"	l
c25	./sh.asm	/^ c25:	cd 40                	int    $0x40$/;"	l
c27	./sh.asm	/^ c27:	c3                   	ret    $/;"	l
c28	./sh.asm	/^ c28:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
c29	./usertests.asm	/^     c29:	83 c4 10             	add    $0x10,%esp$/;"	l
c2c	./usertests.asm	/^     c2c:	85 c0                	test   %eax,%eax$/;"	l
c2d	./sh.asm	/^ c2d:	cd 40                	int    $0x40$/;"	l
c2e	./usertests.asm	/^     c2e:	0f 85 80 00 00 00    	jne    0xcb4$/;"	l
c2f	./sh.asm	/^ c2f:	c3                   	ret    $/;"	l
c3	./echo.asm	/^  c3:	5d                   	pop    %ebp$/;"	l
c3	./grep.asm	/^  c3:	83 c4 10             	add    $0x10,%esp$/;"	l
c3	./init.asm	/^  c3:	68 da 06 00 00       	push   $0x6da$/;"	l
c3	./ln.asm	/^  c3:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)$/;"	l
c3	./ls.asm	/^  c3:	57                   	push   %edi$/;"	l
c3	./sh.asm	/^  c3:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
c30	./sh.asm	/^ c30:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
c34	./usertests.asm	/^     c34:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
c35	./sh.asm	/^ c35:	cd 40                	int    $0x40$/;"	l
c37	./sh.asm	/^ c37:	c3                   	ret    $/;"	l
c38	./sh.asm	/^ c38:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
c39	./usertests.asm	/^     c39:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c3c	./usertests.asm	/^     c3c:	68 11 27 00 00       	push   $0x2711$/;"	l
c3d	./sh.asm	/^ c3d:	cd 40                	int    $0x40$/;"	l
c3f	./sh.asm	/^ c3f:	c3                   	ret    $/;"	l
c4	./echo.asm	/^  c4:	c3                   	ret    $/;"	l
c4	./ls.asm	/^  c4:	e8 3c 04 00 00       	call   0x505$/;"	l
c4	./mkdir.asm	/^  c4:	0f b6 12             	movzbl (%edx),%edx$/;"	l
c4	./rm.asm	/^  c4:	0f b6 12             	movzbl (%edx),%edx$/;"	l
c4	./stressfs.asm	/^  c4:	83 c4 08             	add    $0x8,%esp$/;"	l
c4	./usertests.asm	/^      c4:	e8 09 37 00 00       	call   0x37d2$/;"	l
c4	./zombie.asm	/^  c4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c40	./sh.asm	/^ c40:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
c41	./usertests.asm	/^     c41:	e8 0e 2f 00 00       	call   0x3b54$/;"	l
c45	./sh.asm	/^ c45:	cd 40                	int    $0x40$/;"	l
c46	./usertests.asm	/^     c46:	83 c4 10             	add    $0x10,%esp$/;"	l
c47	./sh.asm	/^ c47:	c3                   	ret    $/;"	l
c48	./sh.asm	/^ c48:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
c49	./usertests.asm	/^     c49:	85 c0                	test   %eax,%eax$/;"	l
c4b	./usertests.asm	/^     c4b:	74 16                	je     0xc63$/;"	l
c4d	./sh.asm	/^ c4d:	cd 40                	int    $0x40$/;"	l
c4d	./usertests.asm	/^     c4d:	89 18                	mov    %ebx,(%eax)$/;"	l
c4f	./sh.asm	/^ c4f:	c3                   	ret    $/;"	l
c4f	./usertests.asm	/^     c4f:	89 c3                	mov    %eax,%ebx$/;"	l
c5	./date.asm	/^  c5:	eb f5                	jmp    0xbc$/;"	l
c5	./dup2test.asm	/^  c5:	83 ec 08             	sub    $0x8,%esp$/;"	l
c5	./echo.asm	/^  c5:	f3 0f 1e fb          	endbr32 $/;"	l
c5	./forktest.asm	/^  c5:	83 c4 10             	add    $0x10,%esp$/;"	l
c50	./sh.asm	/^ c50:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
c51	./usertests.asm	/^     c51:	eb e6                	jmp    0xc39$/;"	l
c53	./usertests.asm	/^     c53:	8b 3b                	mov    (%ebx),%edi$/;"	l
c55	./sh.asm	/^ c55:	cd 40                	int    $0x40$/;"	l
c55	./usertests.asm	/^     c55:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c57	./sh.asm	/^ c57:	c3                   	ret    $/;"	l
c58	./sh.asm	/^ c58:	b8 16 00 00 00       	mov    $0x16,%eax$/;"	l
c58	./usertests.asm	/^     c58:	53                   	push   %ebx$/;"	l
c59	./usertests.asm	/^     c59:	e8 32 2e 00 00       	call   0x3a90$/;"	l
c5d	./sh.asm	/^ c5d:	cd 40                	int    $0x40$/;"	l
c5e	./usertests.asm	/^     c5e:	83 c4 10             	add    $0x10,%esp$/;"	l
c5f	./sh.asm	/^ c5f:	c3                   	ret    $/;"	l
c6	./cat.asm	/^  c6:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
c6	./grep.asm	/^  c6:	eb 05                	jmp    0xcd$/;"	l
c6	./kill.asm	/^  c6:	74 05                	je     0xcd$/;"	l
c6	./sh.asm	/^  c6:	85 c0                	test   %eax,%eax$/;"	l
c60	./sh.asm	/^ c60:	b8 17 00 00 00       	mov    $0x17,%eax$/;"	l
c61	./usertests.asm	/^     c61:	89 fb                	mov    %edi,%ebx$/;"	l
c63	./usertests.asm	/^     c63:	85 db                	test   %ebx,%ebx$/;"	l
c65	./sh.asm	/^ c65:	cd 40                	int    $0x40$/;"	l
c65	./usertests.asm	/^     c65:	75 ec                	jne    0xc53$/;"	l
c67	./sh.asm	/^ c67:	c3                   	ret    $/;"	l
c67	./usertests.asm	/^     c67:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c68	./sh.asm	/^ c68:	55                   	push   %ebp$/;"	l
c69	./sh.asm	/^ c69:	89 e5                	mov    %esp,%ebp$/;"	l
c6a	./usertests.asm	/^     c6a:	68 00 50 00 00       	push   $0x5000$/;"	l
c6b	./sh.asm	/^ c6b:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
c6e	./sh.asm	/^ c6e:	88 55 f4             	mov    %dl,-0xc(%ebp)$/;"	l
c6f	./usertests.asm	/^     c6f:	e8 e0 2e 00 00       	call   0x3b54$/;"	l
c7	./date.asm	/^  c7:	5d                   	pop    %ebp$/;"	l
c7	./ln.asm	/^  c7:	74 05                	je     0xce$/;"	l
c7	./mkdir.asm	/^  c7:	29 d0                	sub    %edx,%eax$/;"	l
c7	./rm.asm	/^  c7:	29 d0                	sub    %edx,%eax$/;"	l
c7	./stressfs.asm	/^  c7:	68 09 07 00 00       	push   $0x709$/;"	l
c7	./wc.asm	/^  c7:	6a 01                	push   $0x1$/;"	l
c7	./zombie.asm	/^  c7:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx$/;"	l
c71	./sh.asm	/^ c71:	6a 01                	push   $0x1$/;"	l
c73	./sh.asm	/^ c73:	8d 55 f4             	lea    -0xc(%ebp),%edx$/;"	l
c74	./usertests.asm	/^     c74:	83 c4 10             	add    $0x10,%esp$/;"	l
c76	./sh.asm	/^ c76:	52                   	push   %edx$/;"	l
c77	./sh.asm	/^ c77:	50                   	push   %eax$/;"	l
c77	./usertests.asm	/^     c77:	85 c0                	test   %eax,%eax$/;"	l
c78	./sh.asm	/^ c78:	e8 5b ff ff ff       	call   0xbd8$/;"	l
c79	./usertests.asm	/^     c79:	74 1d                	je     0xc98$/;"	l
c7b	./usertests.asm	/^     c7b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c7d	./sh.asm	/^ c7d:	83 c4 10             	add    $0x10,%esp$/;"	l
c7e	./usertests.asm	/^     c7e:	50                   	push   %eax$/;"	l
c7f	./usertests.asm	/^     c7f:	e8 0c 2e 00 00       	call   0x3a90$/;"	l
c8	./date.asm	/^  c8:	c3                   	ret    $/;"	l
c8	./dup2test.asm	/^  c8:	68 68 0a 00 00       	push   $0xa68$/;"	l
c8	./forktest.asm	/^  c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
c8	./grep.asm	/^  c8:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
c8	./init.asm	/^  c8:	e8 09 02 00 00       	call   0x2d6$/;"	l
c8	./kill.asm	/^  c8:	83 c0 01             	add    $0x1,%eax$/;"	l
c8	./sh.asm	/^  c8:	74 27                	je     0xf1$/;"	l
c80	./sh.asm	/^ c80:	c9                   	leave  $/;"	l
c81	./sh.asm	/^ c81:	c3                   	ret    $/;"	l
c82	./sh.asm	/^ c82:	55                   	push   %ebp$/;"	l
c83	./sh.asm	/^ c83:	89 e5                	mov    %esp,%ebp$/;"	l
c84	./usertests.asm	/^     c84:	83 c4 08             	add    $0x8,%esp$/;"	l
c85	./sh.asm	/^ c85:	57                   	push   %edi$/;"	l
c86	./sh.asm	/^ c86:	56                   	push   %esi$/;"	l
c87	./sh.asm	/^ c87:	53                   	push   %ebx$/;"	l
c87	./usertests.asm	/^     c87:	68 04 40 00 00       	push   $0x4004$/;"	l
c88	./sh.asm	/^ c88:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
c8b	./sh.asm	/^ c8b:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
c8c	./usertests.asm	/^     c8c:	6a 01                	push   $0x1$/;"	l
c8e	./sh.asm	/^ c8e:	89 d6                	mov    %edx,%esi$/;"	l
c8e	./usertests.asm	/^     c8e:	e8 90 2c 00 00       	call   0x3923$/;"	l
c9	./cat.asm	/^  c9:	e8 17 02 00 00       	call   0x2e5$/;"	l
c9	./date.asm	/^  c9:	f3 0f 1e fb          	endbr32 $/;"	l
c9	./echo.asm	/^  c9:	55                   	push   %ebp$/;"	l
c9	./ln.asm	/^  c9:	83 c0 01             	add    $0x1,%eax$/;"	l
c9	./ls.asm	/^  c9:	83 c4 10             	add    $0x10,%esp$/;"	l
c9	./mkdir.asm	/^  c9:	5d                   	pop    %ebp$/;"	l
c9	./rm.asm	/^  c9:	5d                   	pop    %ebp$/;"	l
c9	./usertests.asm	/^      c9:	83 ec 08             	sub    $0x8,%esp$/;"	l
c9	./wc.asm	/^  c9:	e8 aa 03 00 00       	call   0x478$/;"	l
c90	./sh.asm	/^ c90:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
c93	./usertests.asm	/^     c93:	e8 3a 2b 00 00       	call   0x37d2$/;"	l
c94	./sh.asm	/^ c94:	0f 95 c2             	setne  %dl$/;"	l
c97	./sh.asm	/^ c97:	89 f0                	mov    %esi,%eax$/;"	l
c98	./usertests.asm	/^     c98:	83 ec 08             	sub    $0x8,%esp$/;"	l
c99	./sh.asm	/^ c99:	c1 e8 1f             	shr    $0x1f,%eax$/;"	l
c9b	./usertests.asm	/^     c9b:	68 ea 3f 00 00       	push   $0x3fea$/;"	l
c9c	./sh.asm	/^ c9c:	84 c2                	test   %al,%dl$/;"	l
c9e	./sh.asm	/^ c9e:	74 42                	je     0xce2$/;"	l
ca	./echo.asm	/^  ca:	89 e5                	mov    %esp,%ebp$/;"	l
ca	./mkdir.asm	/^  ca:	c3                   	ret    $/;"	l
ca	./rm.asm	/^  ca:	c3                   	ret    $/;"	l
ca	./sh.asm	/^  ca:	8d 53 04             	lea    0x4(%ebx),%edx$/;"	l
ca0	./sh.asm	/^ ca0:	f7 de                	neg    %esi$/;"	l
ca0	./usertests.asm	/^     ca0:	6a 01                	push   $0x1$/;"	l
ca2	./sh.asm	/^ ca2:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)$/;"	l
ca2	./usertests.asm	/^     ca2:	e8 7c 2c 00 00       	call   0x3923$/;"	l
ca7	./usertests.asm	/^     ca7:	89 34 24             	mov    %esi,(%esp)$/;"	l
ca9	./sh.asm	/^ ca9:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
caa	./usertests.asm	/^     caa:	e8 53 2b 00 00       	call   0x3802$/;"	l
cae	./sh.asm	/^ cae:	89 f0                	mov    %esi,%eax$/;"	l
caf	./usertests.asm	/^     caf:	e8 1e 2b 00 00       	call   0x37d2$/;"	l
cat	./cat.c	/^cat(int fd)$/;"	f
cb	./forktest.asm	/^  cb:	c9                   	leave  $/;"	l
cb	./kill.asm	/^  cb:	eb f5                	jmp    0xc2$/;"	l
cb	./mkdir.asm	/^  cb:	f3 0f 1e fb          	endbr32 $/;"	l
cb	./rm.asm	/^  cb:	f3 0f 1e fb          	endbr32 $/;"	l
cb	./zombie.asm	/^  cb:	0f b6 10             	movzbl (%eax),%edx$/;"	l
cb0	./sh.asm	/^ cb0:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
cb4	./usertests.asm	/^     cb4:	e8 21 2b 00 00       	call   0x37da$/;"	l
cb5	./sh.asm	/^ cb5:	f7 f1                	div    %ecx$/;"	l
cb7	./sh.asm	/^ cb7:	89 df                	mov    %ebx,%edi$/;"	l
cb9	./sh.asm	/^ cb9:	83 c3 01             	add    $0x1,%ebx$/;"	l
cb9	./usertests.asm	/^     cb9:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
cbc	./sh.asm	/^ cbc:	0f b6 92 b8 10 00 00 	movzbl 0x10b8(%edx),%edx$/;"	l
cbc	./usertests.asm	/^     cbc:	5b                   	pop    %ebx$/;"	l
cbd	./usertests.asm	/^     cbd:	5e                   	pop    %esi$/;"	l
cbe	./usertests.asm	/^     cbe:	5f                   	pop    %edi$/;"	l
cbf	./usertests.asm	/^     cbf:	5d                   	pop    %ebp$/;"	l
cc	./echo.asm	/^  cc:	57                   	push   %edi$/;"	l
cc	./forktest.asm	/^  cc:	c3                   	ret    $/;"	l
cc	./ln.asm	/^  cc:	eb f5                	jmp    0xc3$/;"	l
cc	./ls.asm	/^  cc:	85 c0                	test   %eax,%eax$/;"	l
cc	./stressfs.asm	/^  cc:	6a 01                	push   $0x1$/;"	l
cc	./usertests.asm	/^      cc:	68 2b 3c 00 00       	push   $0x3c2b$/;"	l
cc0	./usertests.asm	/^     cc0:	c3                   	ret    $/;"	l
cc1	./usertests.asm	/^     cc1:	f3 0f 1e fb          	endbr32 $/;"	l
cc3	./sh.asm	/^ cc3:	88 54 3d d8          	mov    %dl,-0x28(%ebp,%edi,1)$/;"	l
cc5	./usertests.asm	/^     cc5:	55                   	push   %ebp$/;"	l
cc6	./usertests.asm	/^     cc6:	89 e5                	mov    %esp,%ebp$/;"	l
cc7	./sh.asm	/^ cc7:	89 f2                	mov    %esi,%edx$/;"	l
cc8	./usertests.asm	/^     cc8:	57                   	push   %edi$/;"	l
cc9	./sh.asm	/^ cc9:	89 c6                	mov    %eax,%esi$/;"	l
cc9	./usertests.asm	/^     cc9:	56                   	push   %esi$/;"	l
cca	./usertests.asm	/^     cca:	53                   	push   %ebx$/;"	l
ccb	./sh.asm	/^ ccb:	39 d1                	cmp    %edx,%ecx$/;"	l
ccb	./usertests.asm	/^     ccb:	83 ec 24             	sub    $0x24,%esp$/;"	l
ccd	./sh.asm	/^ ccd:	76 df                	jbe    0xcae$/;"	l
cce	./usertests.asm	/^     cce:	68 0c 40 00 00       	push   $0x400c$/;"	l
ccf	./sh.asm	/^ ccf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)$/;"	l
cd	./date.asm	/^  cd:	55                   	push   %ebp$/;"	l
cd	./dup2test.asm	/^  cd:	6a 06                	push   $0x6$/;"	l
cd	./echo.asm	/^  cd:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
cd	./forktest.asm	/^  cd:	83 ec 08             	sub    $0x8,%esp$/;"	l
cd	./grep.asm	/^  cd:	c9                   	leave  $/;"	l
cd	./init.asm	/^  cd:	83 c4 08             	add    $0x8,%esp$/;"	l
cd	./kill.asm	/^  cd:	5d                   	pop    %ebp$/;"	l
cd	./sh.asm	/^  cd:	83 ec 08             	sub    $0x8,%esp$/;"	l
cd3	./sh.asm	/^ cd3:	74 2f                	je     0xd04$/;"	l
cd3	./usertests.asm	/^     cd3:	6a 01                	push   $0x1$/;"	l
cd5	./sh.asm	/^ cd5:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)$/;"	l
cd5	./usertests.asm	/^     cd5:	e8 49 2c 00 00       	call   0x3923$/;"	l
cda	./sh.asm	/^ cda:	8d 5f 02             	lea    0x2(%edi),%ebx$/;"	l
cda	./usertests.asm	/^     cda:	c7 04 24 1b 40 00 00 	movl   $0x401b,(%esp)$/;"	l
cdd	./sh.asm	/^ cdd:	8b 75 d0             	mov    -0x30(%ebp),%esi$/;"	l
ce	./cat.asm	/^  ce:	83 c6 01             	add    $0x1,%esi$/;"	l
ce	./date.asm	/^  ce:	89 e5                	mov    %esp,%ebp$/;"	l
ce	./grep.asm	/^  ce:	c3                   	ret    $/;"	l
ce	./kill.asm	/^  ce:	c3                   	ret    $/;"	l
ce	./ln.asm	/^  ce:	5d                   	pop    %ebp$/;"	l
ce	./ls.asm	/^  ce:	0f 88 84 00 00 00    	js     0x158$/;"	l
ce	./stressfs.asm	/^  ce:	e8 5b 03 00 00       	call   0x42e$/;"	l
ce	./wc.asm	/^  ce:	e8 54 02 00 00       	call   0x327$/;"	l
ce	./zombie.asm	/^  ce:	84 d2                	test   %dl,%dl$/;"	l
ce0	./sh.asm	/^ ce0:	eb 15                	jmp    0xcf7$/;"	l
ce1	./usertests.asm	/^     ce1:	e8 3c 2b 00 00       	call   0x3822$/;"	l
ce2	./sh.asm	/^ ce2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)$/;"	l
ce6	./usertests.asm	/^     ce6:	83 c4 08             	add    $0x8,%esp$/;"	l
ce9	./sh.asm	/^ ce9:	eb be                	jmp    0xca9$/;"	l
ce9	./usertests.asm	/^     ce9:	68 02 02 00 00       	push   $0x202$/;"	l
ceb	./sh.asm	/^ ceb:	0f be 54 1d d8       	movsbl -0x28(%ebp,%ebx,1),%edx$/;"	l
cee	./usertests.asm	/^     cee:	68 1b 40 00 00       	push   $0x401b$/;"	l
cf	./dup2test.asm	/^  cf:	e8 8c 05 00 00       	call   0x660$/;"	l
cf	./grep.asm	/^  cf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cf	./kill.asm	/^  cf:	f3 0f 1e fb          	endbr32 $/;"	l
cf	./ln.asm	/^  cf:	c3                   	ret    $/;"	l
cf	./mkdir.asm	/^  cf:	55                   	push   %ebp$/;"	l
cf	./rm.asm	/^  cf:	55                   	push   %ebp$/;"	l
cf0	./sh.asm	/^ cf0:	89 f0                	mov    %esi,%eax$/;"	l
cf2	./sh.asm	/^ cf2:	e8 71 ff ff ff       	call   0xc68$/;"	l
cf3	./usertests.asm	/^     cf3:	e8 1a 2b 00 00       	call   0x3812$/;"	l
cf7	./sh.asm	/^ cf7:	83 eb 01             	sub    $0x1,%ebx$/;"	l
cf8	./usertests.asm	/^     cf8:	83 c4 10             	add    $0x10,%esp$/;"	l
cfa	./sh.asm	/^ cfa:	79 ef                	jns    0xceb$/;"	l
cfb	./usertests.asm	/^     cfb:	85 c0                	test   %eax,%eax$/;"	l
cfc	./sh.asm	/^ cfc:	83 c4 2c             	add    $0x2c,%esp$/;"	l
cfd	./usertests.asm	/^     cfd:	78 4d                	js     0xd4c$/;"	l
cff	./sh.asm	/^ cff:	5b                   	pop    %ebx$/;"	l
cff	./usertests.asm	/^     cff:	89 c6                	mov    %eax,%esi$/;"	l
cgaputc	./console.c	/^cgaputc(int c)$/;"	f	file:
chan	./proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
checksum	./mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	./mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	./vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	./x86.h	/^cli(void)$/;"	f
cmd	./sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	./sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	./sh.c	/^struct cmd {$/;"	s	file:
cmos_read	./lapic.c	/^cmos_read(uint reg)$/;"	f	file:
cmostime	./lapic.c	/^cmostime(struct rtcdate *r)$/;"	f
code	./kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	./log.c	/^commit()$/;"	f	file:
committing	./log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	./usertests.c	/^concreate(void)$/;"	f
conf	./kernel.asm	/^  conf = (struct mpconf*) P2V((uint) mp->physaddr);$/;"	d
cons	./console.c	/^} cons;$/;"	v	typeref:struct:__anon2	file:
consoleinit	./console.c	/^consoleinit(void)$/;"	f
consoleintr	./console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	./console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	./console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	./console.c	/^consputc(int c)$/;"	f
context	./proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	./proc.h	/^struct context {$/;"	s
copyout	./vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	./vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	./console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	./proc.h	/^struct cpu {$/;"	s
cpu	./spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpuid	./proc.c	/^cpuid() {$/;"	f
cpus	./mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	./mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	./sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	./usertests.c	/^createdelete(void)$/;"	f
createtest	./usertests.c	/^createtest(void)$/;"	f
crt	./console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	./mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	./mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	./x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	./kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	./proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	./grep.asm	/^   d:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
d	./kernel.asm	/^  d = dst;$/;"	d
d	./wc.asm	/^   d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
d0	./date.asm	/^  d0:	57                   	push   %edi$/;"	l
d0	./echo.asm	/^  d0:	89 d7                	mov    %edx,%edi$/;"	l
d0	./forktest.asm	/^  d0:	68 83 03 00 00       	push   $0x383$/;"	l
d0	./init.asm	/^  d0:	68 dd 06 00 00       	push   $0x6dd$/;"	l
d0	./ln.asm	/^  d0:	f3 0f 1e fb          	endbr32 $/;"	l
d0	./mkdir.asm	/^  d0:	89 e5                	mov    %esp,%ebp$/;"	l
d0	./rm.asm	/^  d0:	89 e5                	mov    %esp,%ebp$/;"	l
d0	./sh.asm	/^  d0:	52                   	push   %edx$/;"	l
d0	./zombie.asm	/^  d0:	74 09                	je     0xdb$/;"	l
d00	./sh.asm	/^ d00:	5e                   	pop    %esi$/;"	l
d01	./sh.asm	/^ d01:	5f                   	pop    %edi$/;"	l
d01	./usertests.asm	/^     d01:	e8 c4 2a 00 00       	call   0x37ca$/;"	l
d02	./sh.asm	/^ d02:	5d                   	pop    %ebp$/;"	l
d03	./sh.asm	/^ d03:	c3                   	ret    $/;"	l
d04	./sh.asm	/^ d04:	8b 75 d0             	mov    -0x30(%ebp),%esi$/;"	l
d06	./usertests.asm	/^     d06:	89 c7                	mov    %eax,%edi$/;"	l
d07	./sh.asm	/^ d07:	eb ee                	jmp    0xcf7$/;"	l
d08	./usertests.asm	/^     d08:	85 c0                	test   %eax,%eax$/;"	l
d09	./sh.asm	/^ d09:	f3 0f 1e fb          	endbr32 $/;"	l
d0a	./usertests.asm	/^     d0a:	75 57                	jne    0xd63$/;"	l
d0c	./usertests.asm	/^     d0c:	b8 63 00 00 00       	mov    $0x63,%eax$/;"	l
d0d	./sh.asm	/^ d0d:	55                   	push   %ebp$/;"	l
d0e	./sh.asm	/^ d0e:	89 e5                	mov    %esp,%ebp$/;"	l
d1	./cat.asm	/^  d1:	83 c4 10             	add    $0x10,%esp$/;"	l
d1	./date.asm	/^  d1:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d1	./sh.asm	/^  d1:	50                   	push   %eax$/;"	l
d1	./usertests.asm	/^      d1:	ff 35 10 5c 00 00    	pushl  0x5c10$/;"	l
d10	./sh.asm	/^ d10:	57                   	push   %edi$/;"	l
d11	./sh.asm	/^ d11:	56                   	push   %esi$/;"	l
d11	./usertests.asm	/^     d11:	83 ec 04             	sub    $0x4,%esp$/;"	l
d12	./sh.asm	/^ d12:	53                   	push   %ebx$/;"	l
d13	./sh.asm	/^ d13:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
d14	./usertests.asm	/^     d14:	6a 0a                	push   $0xa$/;"	l
d16	./sh.asm	/^ d16:	8d 45 10             	lea    0x10(%ebp),%eax$/;"	l
d16	./usertests.asm	/^     d16:	50                   	push   %eax$/;"	l
d17	./usertests.asm	/^     d17:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
d19	./sh.asm	/^ d19:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
d1a	./usertests.asm	/^     d1a:	50                   	push   %eax$/;"	l
d1b	./usertests.asm	/^     d1b:	e8 65 29 00 00       	call   0x3685$/;"	l
d1c	./sh.asm	/^ d1c:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
d2	./echo.asm	/^  d2:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
d2	./mkdir.asm	/^  d2:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
d2	./rm.asm	/^  d2:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
d2	./sh.asm	/^  d2:	e8 19 0b 00 00       	call   0xbf0$/;"	l
d2	./zombie.asm	/^  d2:	38 ca                	cmp    %cl,%dl$/;"	l
d20	./usertests.asm	/^     d20:	83 c4 10             	add    $0x10,%esp$/;"	l
d21	./sh.asm	/^ d21:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
d23	./usertests.asm	/^     d23:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
d26	./sh.asm	/^ d26:	eb 14                	jmp    0xd3c$/;"	l
d28	./sh.asm	/^ d28:	89 fa                	mov    %edi,%edx$/;"	l
d28	./usertests.asm	/^     d28:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx$/;"	l
d2a	./sh.asm	/^ d2a:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2d	./sh.asm	/^ d2d:	e8 36 ff ff ff       	call   0xc68$/;"	l
d2e	./usertests.asm	/^     d2e:	7f 4c                	jg     0xd7c$/;"	l
d3	./kill.asm	/^  d3:	55                   	push   %ebp$/;"	l
d3	./stressfs.asm	/^  d3:	83 c4 08             	add    $0x8,%esp$/;"	l
d3	./wc.asm	/^  d3:	f3 0f 1e fb          	endbr32 $/;"	l
d30	./usertests.asm	/^     d30:	83 ec 04             	sub    $0x4,%esp$/;"	l
d32	./sh.asm	/^ d32:	eb 05                	jmp    0xd39$/;"	l
d33	./usertests.asm	/^     d33:	6a 0a                	push   $0xa$/;"	l
d34	./sh.asm	/^ d34:	83 fe 25             	cmp    $0x25,%esi$/;"	l
d35	./usertests.asm	/^     d35:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
d37	./sh.asm	/^ d37:	74 25                	je     0xd5e$/;"	l
d38	./usertests.asm	/^     d38:	50                   	push   %eax$/;"	l
d39	./sh.asm	/^ d39:	83 c3 01             	add    $0x1,%ebx$/;"	l
d39	./usertests.asm	/^     d39:	56                   	push   %esi$/;"	l
d3a	./usertests.asm	/^     d3a:	e8 b3 2a 00 00       	call   0x37f2$/;"	l
d3c	./sh.asm	/^ d3c:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d3f	./sh.asm	/^ d3f:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax$/;"	l
d3f	./usertests.asm	/^     d3f:	83 c4 10             	add    $0x10,%esp$/;"	l
d4	./cat.asm	/^  d4:	eb c7                	jmp    0x9d$/;"	l
d4	./date.asm	/^  d4:	89 d7                	mov    %edx,%edi$/;"	l
d4	./dup2test.asm	/^  d4:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)$/;"	l
d4	./grep.asm	/^  d4:	eb f7                	jmp    0xcd$/;"	l
d4	./kill.asm	/^  d4:	89 e5                	mov    %esp,%ebp$/;"	l
d4	./ln.asm	/^  d4:	55                   	push   %ebp$/;"	l
d4	./ls.asm	/^  d4:	0f b7 85 c4 fd ff ff 	movzwl -0x23c(%ebp),%eax$/;"	l
d4	./zombie.asm	/^  d4:	74 0a                	je     0xe0$/;"	l
d42	./usertests.asm	/^     d42:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
d43	./sh.asm	/^ d43:	84 c0                	test   %al,%al$/;"	l
d45	./sh.asm	/^ d45:	0f 84 23 01 00 00    	je     0xe6e$/;"	l
d45	./usertests.asm	/^     d45:	75 23                	jne    0xd6a$/;"	l
d47	./usertests.asm	/^     d47:	83 c3 01             	add    $0x1,%ebx$/;"	l
d4a	./usertests.asm	/^     d4a:	eb dc                	jmp    0xd28$/;"	l
d4b	./sh.asm	/^ d4b:	0f be f8             	movsbl %al,%edi$/;"	l
d4c	./usertests.asm	/^     d4c:	83 ec 08             	sub    $0x8,%esp$/;"	l
d4e	./sh.asm	/^ d4e:	0f b6 c0             	movzbl %al,%eax$/;"	l
d4f	./usertests.asm	/^     d4f:	68 e0 4c 00 00       	push   $0x4ce0$/;"	l
d5	./echo.asm	/^  d5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d5	./forktest.asm	/^  d5:	6a 01                	push   $0x1$/;"	l
d5	./init.asm	/^  d5:	6a 01                	push   $0x1$/;"	l
d5	./ln.asm	/^  d5:	89 e5                	mov    %esp,%ebp$/;"	l
d5	./mkdir.asm	/^  d5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d5	./rm.asm	/^  d5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d51	./sh.asm	/^ d51:	85 f6                	test   %esi,%esi$/;"	l
d53	./sh.asm	/^ d53:	75 df                	jne    0xd34$/;"	l
d54	./usertests.asm	/^     d54:	6a 01                	push   $0x1$/;"	l
d55	./sh.asm	/^ d55:	83 f8 25             	cmp    $0x25,%eax$/;"	l
d56	./usertests.asm	/^     d56:	e8 c8 2b 00 00       	call   0x3923$/;"	l
d58	./sh.asm	/^ d58:	75 ce                	jne    0xd28$/;"	l
d5a	./sh.asm	/^ d5a:	89 c6                	mov    %eax,%esi$/;"	l
d5b	./usertests.asm	/^     d5b:	83 c4 10             	add    $0x10,%esp$/;"	l
d5c	./sh.asm	/^ d5c:	eb db                	jmp    0xd39$/;"	l
d5e	./sh.asm	/^ d5e:	83 f8 64             	cmp    $0x64,%eax$/;"	l
d5e	./usertests.asm	/^     d5e:	e9 e4 00 00 00       	jmp    0xe47$/;"	l
d6	./cat.asm	/^  d6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d6	./date.asm	/^  d6:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
d6	./grep.asm	/^  d6:	f3 0f 1e fb          	endbr32 $/;"	l
d6	./kill.asm	/^  d6:	57                   	push   %edi$/;"	l
d6	./stressfs.asm	/^  d6:	6a 00                	push   $0x0$/;"	l
d6	./zombie.asm	/^  d6:	83 c0 01             	add    $0x1,%eax$/;"	l
d61	./sh.asm	/^ d61:	74 49                	je     0xdac$/;"	l
d63	./sh.asm	/^ d63:	83 f8 78             	cmp    $0x78,%eax$/;"	l
d63	./usertests.asm	/^     d63:	b8 70 00 00 00       	mov    $0x70,%eax$/;"	l
d66	./sh.asm	/^ d66:	0f 94 c1             	sete   %cl$/;"	l
d68	./usertests.asm	/^     d68:	eb a7                	jmp    0xd11$/;"	l
d69	./sh.asm	/^ d69:	83 f8 70             	cmp    $0x70,%eax$/;"	l
d6a	./usertests.asm	/^     d6a:	83 ec 08             	sub    $0x8,%esp$/;"	l
d6c	./sh.asm	/^ d6c:	0f 94 c2             	sete   %dl$/;"	l
d6d	./usertests.asm	/^     d6d:	68 0c 4d 00 00       	push   $0x4d0c$/;"	l
d6f	./sh.asm	/^ d6f:	08 d1                	or     %dl,%cl$/;"	l
d7	./forktest.asm	/^  d7:	e8 24 ff ff ff       	call   0x0$/;"	l
d7	./init.asm	/^  d7:	e8 13 03 00 00       	call   0x3ef$/;"	l
d7	./kill.asm	/^  d7:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d7	./ln.asm	/^  d7:	57                   	push   %edi$/;"	l
d7	./sh.asm	/^  d7:	83 c4 0c             	add    $0xc,%esp$/;"	l
d7	./usertests.asm	/^      d7:	e8 47 38 00 00       	call   0x3923$/;"	l
d7	./wc.asm	/^  d7:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
d71	./sh.asm	/^ d71:	75 63                	jne    0xdd6$/;"	l
d72	./usertests.asm	/^     d72:	6a 01                	push   $0x1$/;"	l
d73	./sh.asm	/^ d73:	83 f8 73             	cmp    $0x73,%eax$/;"	l
d74	./usertests.asm	/^     d74:	e8 aa 2b 00 00       	call   0x3923$/;"	l
d76	./sh.asm	/^ d76:	0f 84 84 00 00 00    	je     0xe00$/;"	l
d79	./usertests.asm	/^     d79:	83 c4 10             	add    $0x10,%esp$/;"	l
d7c	./sh.asm	/^ d7c:	83 f8 63             	cmp    $0x63,%eax$/;"	l
d7c	./usertests.asm	/^     d7c:	85 ff                	test   %edi,%edi$/;"	l
d7e	./usertests.asm	/^     d7e:	74 4d                	je     0xdcd$/;"	l
d7f	./sh.asm	/^ d7f:	0f 84 b7 00 00 00    	je     0xe3c$/;"	l
d8	./echo.asm	/^  d8:	fc                   	cld    $/;"	l
d8	./ln.asm	/^  d8:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d8	./stressfs.asm	/^  d8:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
d80	./usertests.asm	/^     d80:	e8 55 2a 00 00       	call   0x37da$/;"	l
d85	./sh.asm	/^ d85:	83 f8 25             	cmp    $0x25,%eax$/;"	l
d85	./usertests.asm	/^     d85:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d88	./sh.asm	/^ d88:	0f 84 cc 00 00 00    	je     0xe5a$/;"	l
d88	./usertests.asm	/^     d88:	56                   	push   %esi$/;"	l
d89	./usertests.asm	/^     d89:	e8 6c 2a 00 00       	call   0x37fa$/;"	l
d8e	./sh.asm	/^ d8e:	ba 25 00 00 00       	mov    $0x25,%edx$/;"	l
d8e	./usertests.asm	/^     d8e:	83 c4 08             	add    $0x8,%esp$/;"	l
d9	./cat.asm	/^  d9:	6a 00                	push   $0x0$/;"	l
d9	./date.asm	/^  d9:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d9	./echo.asm	/^  d9:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
d9	./zombie.asm	/^  d9:	eb f0                	jmp    0xcb$/;"	l
d91	./usertests.asm	/^     d91:	6a 00                	push   $0x0$/;"	l
d93	./sh.asm	/^ d93:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d93	./usertests.asm	/^     d93:	68 1b 40 00 00       	push   $0x401b$/;"	l
d96	./sh.asm	/^ d96:	e8 cd fe ff ff       	call   0xc68$/;"	l
d98	./usertests.asm	/^     d98:	e8 75 2a 00 00       	call   0x3812$/;"	l
d9b	./sh.asm	/^ d9b:	89 fa                	mov    %edi,%edx$/;"	l
d9d	./sh.asm	/^ d9d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d9d	./usertests.asm	/^     d9d:	89 c7                	mov    %eax,%edi$/;"	l
d9f	./usertests.asm	/^     d9f:	83 c4 10             	add    $0x10,%esp$/;"	l
da	./grep.asm	/^  da:	55                   	push   %ebp$/;"	l
da	./kill.asm	/^  da:	89 d7                	mov    %edx,%edi$/;"	l
da	./mkdir.asm	/^  da:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)$/;"	l
da	./rm.asm	/^  da:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)$/;"	l
da	./sh.asm	/^  da:	ff 73 04             	pushl  0x4(%ebx)$/;"	l
da0	./sh.asm	/^ da0:	e8 c3 fe ff ff       	call   0xc68$/;"	l
da2	./usertests.asm	/^     da2:	85 c0                	test   %eax,%eax$/;"	l
da4	./usertests.asm	/^     da4:	78 2c                	js     0xdd2$/;"	l
da5	./sh.asm	/^ da5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
da6	./usertests.asm	/^     da6:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
daa	./sh.asm	/^ daa:	eb 8d                	jmp    0xd39$/;"	l
dab	./usertests.asm	/^     dab:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
dac	./sh.asm	/^ dac:	8b 7d e4             	mov    -0x1c(%ebp),%edi$/;"	l
daf	./sh.asm	/^ daf:	8b 17                	mov    (%edi),%edx$/;"	l
data	./buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	./ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	./kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	./kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	./pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	./date.h	/^  uint day;$/;"	m	struct:rtcdate
db	./cat.asm	/^  db:	e8 20 ff ff ff       	call   0x0$/;"	l
db	./dup2test.asm	/^  db:	e8 57 04 00 00       	call   0x537$/;"	l
db	./echo.asm	/^  db:	89 d0                	mov    %edx,%eax$/;"	l
db	./grep.asm	/^  db:	89 e5                	mov    %esp,%ebp$/;"	l
db	./ln.asm	/^  db:	89 d7                	mov    %edx,%edi$/;"	l
db	./ls.asm	/^  db:	0f bf f0             	movswl %ax,%esi$/;"	l
db	./mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	./stressfs.asm	/^  db:	50                   	push   %eax$/;"	l
db	./wc.asm	/^  db:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
db	./zombie.asm	/^  db:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
db0	./usertests.asm	/^     db0:	83 ec 04             	sub    $0x4,%esp$/;"	l
db1	./sh.asm	/^ db1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
db3	./usertests.asm	/^     db3:	6a 0a                	push   $0xa$/;"	l
db4	./sh.asm	/^ db4:	6a 01                	push   $0x1$/;"	l
db5	./usertests.asm	/^     db5:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
db6	./sh.asm	/^ db6:	b9 0a 00 00 00       	mov    $0xa,%ecx$/;"	l
db8	./usertests.asm	/^     db8:	50                   	push   %eax$/;"	l
db9	./usertests.asm	/^     db9:	57                   	push   %edi$/;"	l
dba	./usertests.asm	/^     dba:	e8 2b 2a 00 00       	call   0x37ea$/;"	l
dbb	./sh.asm	/^ dbb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dbe	./sh.asm	/^ dbe:	e8 bf fe ff ff       	call   0xc82$/;"	l
dbf	./usertests.asm	/^     dbf:	83 c4 10             	add    $0x10,%esp$/;"	l
dc	./date.asm	/^  dc:	fc                   	cld    $/;"	l
dc	./forktest.asm	/^  dc:	e8 d1 01 00 00       	call   0x2b2$/;"	l
dc	./init.asm	/^  dc:	e8 bd 01 00 00       	call   0x29e$/;"	l
dc	./kill.asm	/^  dc:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
dc	./stressfs.asm	/^  dc:	e8 3c 02 00 00       	call   0x31d$/;"	l
dc	./usertests.asm	/^      dc:	e8 f1 36 00 00       	call   0x37d2$/;"	l
dc2	./usertests.asm	/^     dc2:	85 c0                	test   %eax,%eax$/;"	l
dc3	./sh.asm	/^ dc3:	83 c7 04             	add    $0x4,%edi$/;"	l
dc4	./usertests.asm	/^     dc4:	7e 41                	jle    0xe07$/;"	l
dc6	./sh.asm	/^ dc6:	89 7d e4             	mov    %edi,-0x1c(%ebp)$/;"	l
dc6	./usertests.asm	/^     dc6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
dc9	./sh.asm	/^ dc9:	83 c4 10             	add    $0x10,%esp$/;"	l
dcb	./usertests.asm	/^     dcb:	eb 21                	jmp    0xdee$/;"	l
dcc	./sh.asm	/^ dcc:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
dcd	./usertests.asm	/^     dcd:	e8 00 2a 00 00       	call   0x37d2$/;"	l
dd	./date.asm	/^  dd:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
dd	./echo.asm	/^  dd:	5f                   	pop    %edi$/;"	l
dd	./grep.asm	/^  dd:	56                   	push   %esi$/;"	l
dd	./ln.asm	/^  dd:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
dd	./sh.asm	/^  dd:	68 d7 0f 00 00       	push   $0xfd7$/;"	l
dd1	./sh.asm	/^ dd1:	e9 63 ff ff ff       	jmp    0xd39$/;"	l
dd2	./usertests.asm	/^     dd2:	83 ec 08             	sub    $0x8,%esp$/;"	l
dd5	./usertests.asm	/^     dd5:	68 2c 4d 00 00       	push   $0x4d2c$/;"	l
dd6	./sh.asm	/^ dd6:	8b 7d e4             	mov    -0x1c(%ebp),%edi$/;"	l
dd9	./sh.asm	/^ dd9:	8b 17                	mov    (%edi),%edx$/;"	l
dda	./usertests.asm	/^     dda:	6a 01                	push   $0x1$/;"	l
ddb	./sh.asm	/^ ddb:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ddc	./usertests.asm	/^     ddc:	e8 42 2b 00 00       	call   0x3923$/;"	l
dde	./sh.asm	/^ dde:	6a 00                	push   $0x0$/;"	l
de	./echo.asm	/^  de:	5d                   	pop    %ebp$/;"	l
de	./grep.asm	/^  de:	53                   	push   %ebx$/;"	l
de	./ls.asm	/^  de:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
de	./mkdir.asm	/^  de:	74 05                	je     0xe5$/;"	l
de	./rm.asm	/^  de:	74 05                	je     0xe5$/;"	l
de	./wc.asm	/^  de:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
de0	./sh.asm	/^ de0:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
de1	./usertests.asm	/^     de1:	83 c4 10             	add    $0x10,%esp$/;"	l
de4	./usertests.asm	/^     de4:	eb 61                	jmp    0xe47$/;"	l
de5	./sh.asm	/^ de5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
de6	./usertests.asm	/^     de6:	83 c3 01             	add    $0x1,%ebx$/;"	l
de8	./sh.asm	/^ de8:	e8 95 fe ff ff       	call   0xc82$/;"	l
de9	./usertests.asm	/^     de9:	eb 12                	jmp    0xdfd$/;"	l
deallocuvm	./vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
deb	./usertests.asm	/^     deb:	83 c0 01             	add    $0x1,%eax$/;"	l
ded	./sh.asm	/^ ded:	83 c7 04             	add    $0x4,%edi$/;"	l
dee	./usertests.asm	/^     dee:	83 f8 09             	cmp    $0x9,%eax$/;"	l
default	./kernel.asm	/^    default:$/;"	l
dev	./buf.h	/^  uint dev;$/;"	m	struct:buf
dev	./file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	./log.c	/^  int dev;$/;"	m	struct:log	file:
dev	./stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	./file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	./file.h	/^struct devsw {$/;"	s
df	./date.asm	/^  df:	89 d0                	mov    %edx,%eax$/;"	l
df	./echo.asm	/^  df:	c3                   	ret    $/;"	l
df	./grep.asm	/^  df:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
df	./kill.asm	/^  df:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
df0	./sh.asm	/^ df0:	89 7d e4             	mov    %edi,-0x1c(%ebp)$/;"	l
df1	./usertests.asm	/^     df1:	77 bd                	ja     0xdb0$/;"	l
df3	./sh.asm	/^ df3:	83 c4 10             	add    $0x10,%esp$/;"	l
df3	./usertests.asm	/^     df3:	0f b6 54 05 de       	movzbl -0x22(%ebp,%eax,1),%edx$/;"	l
df6	./sh.asm	/^ df6:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
df8	./usertests.asm	/^     df8:	80 fa 63             	cmp    $0x63,%dl$/;"	l
dfb	./sh.asm	/^ dfb:	e9 39 ff ff ff       	jmp    0xd39$/;"	l
dfb	./usertests.asm	/^     dfb:	74 e9                	je     0xde6$/;"	l
dfd	./usertests.asm	/^     dfd:	80 fa 70             	cmp    $0x70,%dl$/;"	l
dinode	./fs.h	/^struct dinode {$/;"	s
dip	./kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	./kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	./kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	./fs.h	/^struct dirent {$/;"	s
dirfile	./usertests.c	/^dirfile(void)$/;"	f
dirlink	./fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	./fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	./usertests.c	/^void dirtest(void)$/;"	f
disksize	./memide.c	/^static int disksize;$/;"	v	file:
do_commit	./kernel.asm	/^    do_commit = 1;$/;"	d
dpl	./mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	./mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	./mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	./x86.h	/^  ushort ds;$/;"	m	struct:trapframe
e	./console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon3	file:
e	./date.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./dup2test.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./echo.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./forktest.asm	/^   e:	53                   	push   %ebx$/;"	l
e	./init.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./kernel.asm	/^  e = addr+len;$/;"	d
e	./kill.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./ln.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./mkdir.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./rm.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./stressfs.asm	/^   e:	55                   	push   %ebp$/;"	l
e	./zombie.asm	/^   e:	55                   	push   %ebp$/;"	l
e0	./cat.asm	/^  e0:	e8 d8 01 00 00       	call   0x2bd$/;"	l
e0	./dup2test.asm	/^  e0:	83 c4 10             	add    $0x10,%esp$/;"	l
e0	./echo.asm	/^  e0:	f3 0f 1e fb          	endbr32 $/;"	l
e0	./ln.asm	/^  e0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e0	./mkdir.asm	/^  e0:	83 c0 01             	add    $0x1,%eax$/;"	l
e0	./rm.asm	/^  e0:	83 c0 01             	add    $0x1,%eax$/;"	l
e0	./zombie.asm	/^  e0:	5d                   	pop    %ebp$/;"	l
e00	./sh.asm	/^ e00:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e00	./usertests.asm	/^     e00:	75 e9                	jne    0xdeb$/;"	l
e02	./usertests.asm	/^     e02:	83 c6 01             	add    $0x1,%esi$/;"	l
e03	./sh.asm	/^ e03:	8b 30                	mov    (%eax),%esi$/;"	l
e05	./sh.asm	/^ e05:	83 c0 04             	add    $0x4,%eax$/;"	l
e05	./usertests.asm	/^     e05:	eb e4                	jmp    0xdeb$/;"	l
e07	./usertests.asm	/^     e07:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e08	./sh.asm	/^ e08:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
e0a	./usertests.asm	/^     e0a:	57                   	push   %edi$/;"	l
e0b	./sh.asm	/^ e0b:	85 f6                	test   %esi,%esi$/;"	l
e0b	./usertests.asm	/^     e0b:	e8 ea 29 00 00       	call   0x37fa$/;"	l
e0d	./sh.asm	/^ e0d:	75 28                	jne    0xe37$/;"	l
e0f	./sh.asm	/^ e0f:	be b0 10 00 00       	mov    $0x10b0,%esi$/;"	l
e1	./date.asm	/^  e1:	5f                   	pop    %edi$/;"	l
e1	./forktest.asm	/^  e1:	f3 0f 1e fb          	endbr32 $/;"	l
e1	./init.asm	/^  e1:	f3 0f 1e fb          	endbr32 $/;"	l
e1	./stressfs.asm	/^  e1:	89 c6                	mov    %eax,%esi$/;"	l
e1	./usertests.asm	/^      e1:	f3 0f 1e fb          	endbr32 $/;"	l
e1	./wc.asm	/^  e1:	55                   	push   %ebp$/;"	l
e1	./zombie.asm	/^  e1:	c3                   	ret    $/;"	l
e10	./usertests.asm	/^     e10:	c7 04 24 1b 40 00 00 	movl   $0x401b,(%esp)$/;"	l
e14	./sh.asm	/^ e14:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
e17	./sh.asm	/^ e17:	eb 0d                	jmp    0xe26$/;"	l
e17	./usertests.asm	/^     e17:	e8 06 2a 00 00       	call   0x3822$/;"	l
e19	./sh.asm	/^ e19:	0f be d2             	movsbl %dl,%edx$/;"	l
e1c	./sh.asm	/^ e1c:	89 f8                	mov    %edi,%eax$/;"	l
e1c	./usertests.asm	/^     e1c:	83 c4 10             	add    $0x10,%esp$/;"	l
e1e	./sh.asm	/^ e1e:	e8 45 fe ff ff       	call   0xc68$/;"	l
e1f	./usertests.asm	/^     e1f:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx$/;"	l
e2	./date.asm	/^  e2:	5d                   	pop    %ebp$/;"	l
e2	./grep.asm	/^  e2:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
e2	./kill.asm	/^  e2:	fc                   	cld    $/;"	l
e2	./ls.asm	/^  e2:	0f 84 8d 00 00 00    	je     0x175$/;"	l
e2	./sh.asm	/^  e2:	6a 02                	push   $0x2$/;"	l
e2	./wc.asm	/^  e2:	89 e5                	mov    %esp,%ebp$/;"	l
e2	./zombie.asm	/^  e2:	f3 0f 1e fb          	endbr32 $/;"	l
e23	./sh.asm	/^ e23:	83 c6 01             	add    $0x1,%esi$/;"	l
e25	./usertests.asm	/^     e25:	0f 94 c2             	sete   %dl$/;"	l
e26	./sh.asm	/^ e26:	0f b6 16             	movzbl (%esi),%edx$/;"	l
e28	./usertests.asm	/^     e28:	81 fe 10 27 00 00    	cmp    $0x2710,%esi$/;"	l
e29	./sh.asm	/^ e29:	84 d2                	test   %dl,%dl$/;"	l
e2b	./sh.asm	/^ e2b:	75 ec                	jne    0xe19$/;"	l
e2d	./sh.asm	/^ e2d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
e2e	./usertests.asm	/^     e2e:	0f 94 c0             	sete   %al$/;"	l
e3	./date.asm	/^  e3:	c3                   	ret    $/;"	l
e3	./dup2test.asm	/^  e3:	85 c0                	test   %eax,%eax$/;"	l
e3	./kill.asm	/^  e3:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
e3	./ln.asm	/^  e3:	fc                   	cld    $/;"	l
e3	./mkdir.asm	/^  e3:	eb f5                	jmp    0xda$/;"	l
e3	./rm.asm	/^  e3:	eb f5                	jmp    0xda$/;"	l
e3	./stressfs.asm	/^  e3:	83 c4 10             	add    $0x10,%esp$/;"	l
e31	./usertests.asm	/^     e31:	84 c2                	test   %al,%dl$/;"	l
e32	./sh.asm	/^ e32:	e9 02 ff ff ff       	jmp    0xd39$/;"	l
e33	./usertests.asm	/^     e33:	74 1a                	je     0xe4f$/;"	l
e35	./usertests.asm	/^     e35:	83 ec 08             	sub    $0x8,%esp$/;"	l
e37	./sh.asm	/^ e37:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
e38	./usertests.asm	/^     e38:	68 24 40 00 00       	push   $0x4024$/;"	l
e3a	./sh.asm	/^ e3a:	eb ea                	jmp    0xe26$/;"	l
e3c	./sh.asm	/^ e3c:	8b 7d e4             	mov    -0x1c(%ebp),%edi$/;"	l
e3d	./usertests.asm	/^     e3d:	6a 01                	push   $0x1$/;"	l
e3f	./sh.asm	/^ e3f:	0f be 17             	movsbl (%edi),%edx$/;"	l
e3f	./usertests.asm	/^     e3f:	e8 df 2a 00 00       	call   0x3923$/;"	l
e4	./date.asm	/^  e4:	f3 0f 1e fb          	endbr32 $/;"	l
e4	./echo.asm	/^  e4:	55                   	push   %ebp$/;"	l
e4	./ln.asm	/^  e4:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
e4	./sh.asm	/^  e4:	e8 20 0c 00 00       	call   0xd09$/;"	l
e4	./wc.asm	/^  e4:	57                   	push   %edi$/;"	l
e42	./sh.asm	/^ e42:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e44	./usertests.asm	/^     e44:	83 c4 10             	add    $0x10,%esp$/;"	l
e45	./sh.asm	/^ e45:	e8 1e fe ff ff       	call   0xc68$/;"	l
e47	./usertests.asm	/^     e47:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
e4a	./sh.asm	/^ e4a:	83 c7 04             	add    $0x4,%edi$/;"	l
e4a	./usertests.asm	/^     e4a:	5b                   	pop    %ebx$/;"	l
e4b	./usertests.asm	/^     e4b:	5e                   	pop    %esi$/;"	l
e4c	./usertests.asm	/^     e4c:	5f                   	pop    %edi$/;"	l
e4d	./sh.asm	/^ e4d:	89 7d e4             	mov    %edi,-0x1c(%ebp)$/;"	l
e4d	./usertests.asm	/^     e4d:	5d                   	pop    %ebp$/;"	l
e4e	./usertests.asm	/^     e4e:	c3                   	ret    $/;"	l
e4f	./usertests.asm	/^     e4f:	56                   	push   %esi$/;"	l
e5	./cat.asm	/^  e5:	83 ec 04             	sub    $0x4,%esp$/;"	l
e5	./dup2test.asm	/^  e5:	0f 85 c6 01 00 00    	jne    0x2b1$/;"	l
e5	./echo.asm	/^  e5:	89 e5                	mov    %esp,%ebp$/;"	l
e5	./forktest.asm	/^  e5:	55                   	push   %ebp$/;"	l
e5	./grep.asm	/^  e5:	80 3e 5e             	cmpb   $0x5e,(%esi)$/;"	l
e5	./init.asm	/^  e5:	55                   	push   %ebp$/;"	l
e5	./kill.asm	/^  e5:	89 d0                	mov    %edx,%eax$/;"	l
e5	./mkdir.asm	/^  e5:	5d                   	pop    %ebp$/;"	l
e5	./rm.asm	/^  e5:	5d                   	pop    %ebp$/;"	l
e5	./usertests.asm	/^      e5:	55                   	push   %ebp$/;"	l
e5	./wc.asm	/^  e5:	56                   	push   %esi$/;"	l
e50	./sh.asm	/^ e50:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
e50	./usertests.asm	/^     e50:	53                   	push   %ebx$/;"	l
e51	./usertests.asm	/^     e51:	68 31 40 00 00       	push   $0x4031$/;"	l
e55	./sh.asm	/^ e55:	e9 df fe ff ff       	jmp    0xd39$/;"	l
e56	./usertests.asm	/^     e56:	6a 01                	push   $0x1$/;"	l
e58	./usertests.asm	/^     e58:	e8 c6 2a 00 00       	call   0x3923$/;"	l
e5a	./sh.asm	/^ e5a:	89 fa                	mov    %edi,%edx$/;"	l
e5c	./sh.asm	/^ e5c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e5d	./usertests.asm	/^     e5d:	e8 70 29 00 00       	call   0x37d2$/;"	l
e5f	./sh.asm	/^ e5f:	e8 04 fe ff ff       	call   0xc68$/;"	l
e6	./forktest.asm	/^  e6:	89 e5                	mov    %esp,%ebp$/;"	l
e6	./init.asm	/^  e6:	89 e5                	mov    %esp,%ebp$/;"	l
e6	./ln.asm	/^  e6:	89 d0                	mov    %edx,%eax$/;"	l
e6	./mkdir.asm	/^  e6:	c3                   	ret    $/;"	l
e6	./rm.asm	/^  e6:	c3                   	ret    $/;"	l
e6	./stressfs.asm	/^  e6:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
e6	./usertests.asm	/^      e6:	89 e5                	mov    %esp,%ebp$/;"	l
e6	./wc.asm	/^  e6:	53                   	push   %ebx$/;"	l
e6	./zombie.asm	/^  e6:	55                   	push   %ebp$/;"	l
e62	./usertests.asm	/^     e62:	f3 0f 1e fb          	endbr32 $/;"	l
e64	./sh.asm	/^ e64:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
e66	./usertests.asm	/^     e66:	55                   	push   %ebp$/;"	l
e67	./usertests.asm	/^     e67:	89 e5                	mov    %esp,%ebp$/;"	l
e69	./sh.asm	/^ e69:	e9 cb fe ff ff       	jmp    0xd39$/;"	l
e69	./usertests.asm	/^     e69:	57                   	push   %edi$/;"	l
e6a	./usertests.asm	/^     e6a:	56                   	push   %esi$/;"	l
e6b	./usertests.asm	/^     e6b:	53                   	push   %ebx$/;"	l
e6c	./usertests.asm	/^     e6c:	83 ec 34             	sub    $0x34,%esp$/;"	l
e6e	./sh.asm	/^ e6e:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
e6f	./usertests.asm	/^     e6f:	c7 45 d8 46 40 00 00 	movl   $0x4046,-0x28(%ebp)$/;"	l
e7	./echo.asm	/^  e7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e7	./kill.asm	/^  e7:	5f                   	pop    %edi$/;"	l
e7	./mkdir.asm	/^  e7:	f3 0f 1e fb          	endbr32 $/;"	l
e7	./rm.asm	/^  e7:	f3 0f 1e fb          	endbr32 $/;"	l
e7	./wc.asm	/^  e7:	51                   	push   %ecx$/;"	l
e7	./zombie.asm	/^  e7:	89 e5                	mov    %esp,%ebp$/;"	l
e71	./sh.asm	/^ e71:	5b                   	pop    %ebx$/;"	l
e72	./sh.asm	/^ e72:	5e                   	pop    %esi$/;"	l
e73	./sh.asm	/^ e73:	5f                   	pop    %edi$/;"	l
e74	./sh.asm	/^ e74:	5d                   	pop    %ebp$/;"	l
e75	./sh.asm	/^ e75:	c3                   	ret    $/;"	l
e76	./sh.asm	/^ e76:	f3 0f 1e fb          	endbr32 $/;"	l
e76	./usertests.asm	/^     e76:	c7 45 dc 8f 41 00 00 	movl   $0x418f,-0x24(%ebp)$/;"	l
e7a	./sh.asm	/^ e7a:	55                   	push   %ebp$/;"	l
e7b	./sh.asm	/^ e7b:	89 e5                	mov    %esp,%ebp$/;"	l
e7d	./sh.asm	/^ e7d:	57                   	push   %edi$/;"	l
e7d	./usertests.asm	/^     e7d:	c7 45 e0 93 41 00 00 	movl   $0x4193,-0x20(%ebp)$/;"	l
e7e	./sh.asm	/^ e7e:	56                   	push   %esi$/;"	l
e7f	./sh.asm	/^ e7f:	53                   	push   %ebx$/;"	l
e8	./cat.asm	/^  e8:	ff 37                	pushl  (%edi)$/;"	l
e8	./date.asm	/^  e8:	55                   	push   %ebp$/;"	l
e8	./forktest.asm	/^  e8:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
e8	./grep.asm	/^  e8:	75 14                	jne    0xfe$/;"	l
e8	./init.asm	/^  e8:	56                   	push   %esi$/;"	l
e8	./kill.asm	/^  e8:	5d                   	pop    %ebp$/;"	l
e8	./ln.asm	/^  e8:	5f                   	pop    %edi$/;"	l
e8	./ls.asm	/^  e8:	66 83 f8 02          	cmp    $0x2,%ax$/;"	l
e8	./usertests.asm	/^      e8:	83 ec 10             	sub    $0x10,%esp$/;"	l
e8	./wc.asm	/^  e8:	83 ec 18             	sub    $0x18,%esp$/;"	l
e80	./sh.asm	/^ e80:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
e83	./sh.asm	/^ e83:	8d 4b f8             	lea    -0x8(%ebx),%ecx$/;"	l
e84	./usertests.asm	/^     e84:	c7 45 e4 49 40 00 00 	movl   $0x4049,-0x1c(%ebp)$/;"	l
e86	./sh.asm	/^ e86:	a1 a4 16 00 00       	mov    0x16a4,%eax$/;"	l
e8b	./sh.asm	/^ e8b:	eb 02                	jmp    0xe8f$/;"	l
e8b	./usertests.asm	/^     e8b:	68 4c 40 00 00       	push   $0x404c$/;"	l
e8d	./sh.asm	/^ e8d:	89 d0                	mov    %edx,%eax$/;"	l
e8f	./sh.asm	/^ e8f:	39 c8                	cmp    %ecx,%eax$/;"	l
e9	./date.asm	/^  e9:	89 e5                	mov    %esp,%ebp$/;"	l
e9	./init.asm	/^  e9:	53                   	push   %ebx$/;"	l
e9	./kill.asm	/^  e9:	c3                   	ret    $/;"	l
e9	./ln.asm	/^  e9:	5d                   	pop    %ebp$/;"	l
e9	./sh.asm	/^  e9:	83 c4 10             	add    $0x10,%esp$/;"	l
e9	./zombie.asm	/^  e9:	57                   	push   %edi$/;"	l
e90	./usertests.asm	/^     e90:	6a 01                	push   $0x1$/;"	l
e91	./sh.asm	/^ e91:	73 04                	jae    0xe97$/;"	l
e92	./usertests.asm	/^     e92:	e8 8c 2a 00 00       	call   0x3923$/;"	l
e93	./sh.asm	/^ e93:	39 08                	cmp    %ecx,(%eax)$/;"	l
e95	./sh.asm	/^ e95:	77 12                	ja     0xea9$/;"	l
e97	./sh.asm	/^ e97:	8b 10                	mov    (%eax),%edx$/;"	l
e97	./usertests.asm	/^     e97:	83 c4 10             	add    $0x10,%esp$/;"	l
e99	./sh.asm	/^ e99:	39 c2                	cmp    %eax,%edx$/;"	l
e9a	./usertests.asm	/^     e9a:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
e9b	./sh.asm	/^ e9b:	77 f0                	ja     0xe8d$/;"	l
e9d	./sh.asm	/^ e9d:	39 c8                	cmp    %ecx,%eax$/;"	l
e9f	./sh.asm	/^ e9f:	72 08                	jb     0xea9$/;"	l
e9f	./usertests.asm	/^     e9f:	83 fe 03             	cmp    $0x3,%esi$/;"	l
ea	./cat.asm	/^  ea:	68 ef 06 00 00       	push   $0x6ef$/;"	l
ea	./echo.asm	/^  ea:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx$/;"	l
ea	./grep.asm	/^  ea:	83 ec 08             	sub    $0x8,%esp$/;"	l
ea	./init.asm	/^  ea:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
ea	./kill.asm	/^  ea:	f3 0f 1e fb          	endbr32 $/;"	l
ea	./ln.asm	/^  ea:	c3                   	ret    $/;"	l
ea	./zombie.asm	/^  ea:	56                   	push   %esi$/;"	l
ea1	./sh.asm	/^ ea1:	39 ca                	cmp    %ecx,%edx$/;"	l
ea2	./usertests.asm	/^     ea2:	0f 8f bb 00 00 00    	jg     0xf63$/;"	l
ea3	./sh.asm	/^ ea3:	77 04                	ja     0xea9$/;"	l
ea5	./sh.asm	/^ ea5:	89 d0                	mov    %edx,%eax$/;"	l
ea7	./sh.asm	/^ ea7:	eb e6                	jmp    0xe8f$/;"	l
ea8	./usertests.asm	/^     ea8:	8b 7c b5 d8          	mov    -0x28(%ebp,%esi,4),%edi$/;"	l
ea9	./sh.asm	/^ ea9:	8b 73 fc             	mov    -0x4(%ebx),%esi$/;"	l
eac	./sh.asm	/^ eac:	8d 3c f1             	lea    (%ecx,%esi,8),%edi$/;"	l
eac	./usertests.asm	/^     eac:	83 ec 0c             	sub    $0xc,%esp$/;"	l
eaf	./sh.asm	/^ eaf:	8b 10                	mov    (%eax),%edx$/;"	l
eaf	./usertests.asm	/^     eaf:	57                   	push   %edi$/;"	l
eargv	./sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	./mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	./x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	./date.asm	/^  eb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
eb	./dup2test.asm	/^  eb:	83 ec 08             	sub    $0x8,%esp$/;"	l
eb	./forktest.asm	/^  eb:	e8 39 ff ff ff       	call   0x29$/;"	l
eb	./ln.asm	/^  eb:	f3 0f 1e fb          	endbr32 $/;"	l
eb	./mkdir.asm	/^  eb:	55                   	push   %ebp$/;"	l
eb	./rm.asm	/^  eb:	55                   	push   %ebp$/;"	l
eb	./stressfs.asm	/^  eb:	eb 1b                	jmp    0x108$/;"	l
eb	./usertests.asm	/^      eb:	68 3b 3c 00 00       	push   $0x3c3b$/;"	l
eb	./wc.asm	/^  eb:	8b 01                	mov    (%ecx),%eax$/;"	l
eb	./zombie.asm	/^  eb:	53                   	push   %ebx$/;"	l
eb0	./usertests.asm	/^     eb0:	e8 6d 29 00 00       	call   0x3822$/;"	l
eb1	./sh.asm	/^ eb1:	39 d7                	cmp    %edx,%edi$/;"	l
eb3	./sh.asm	/^ eb3:	74 19                	je     0xece$/;"	l
eb5	./sh.asm	/^ eb5:	89 53 f8             	mov    %edx,-0x8(%ebx)$/;"	l
eb5	./usertests.asm	/^     eb5:	e8 10 29 00 00       	call   0x37ca$/;"	l
eb8	./sh.asm	/^ eb8:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
eba	./usertests.asm	/^     eba:	83 c4 10             	add    $0x10,%esp$/;"	l
ebb	./sh.asm	/^ ebb:	8d 34 d0             	lea    (%eax,%edx,8),%esi$/;"	l
ebd	./usertests.asm	/^     ebd:	85 c0                	test   %eax,%eax$/;"	l
ebe	./sh.asm	/^ ebe:	39 ce                	cmp    %ecx,%esi$/;"	l
ebf	./usertests.asm	/^     ebf:	78 07                	js     0xec8$/;"	l
ebp	./kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	./kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	./mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	./proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	./x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	./mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	./proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	./x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	./ls.asm	/^  ec:	75 41                	jne    0x12f$/;"	l
ec	./mkdir.asm	/^  ec:	89 e5                	mov    %esp,%ebp$/;"	l
ec	./rm.asm	/^  ec:	89 e5                	mov    %esp,%ebp$/;"	l
ec	./sh.asm	/^  ec:	e8 c7 0a 00 00       	call   0xbb8$/;"	l
ec	./zombie.asm	/^  ec:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
ec0	./sh.asm	/^ ec0:	74 1b                	je     0xedd$/;"	l
ec1	./usertests.asm	/^     ec1:	74 19                	je     0xedc$/;"	l
ec2	./sh.asm	/^ ec2:	89 08                	mov    %ecx,(%eax)$/;"	l
ec3	./usertests.asm	/^     ec3:	83 c6 01             	add    $0x1,%esi$/;"	l
ec4	./sh.asm	/^ ec4:	a3 a4 16 00 00       	mov    %eax,0x16a4$/;"	l
ec6	./usertests.asm	/^     ec6:	eb d7                	jmp    0xe9f$/;"	l
ec8	./usertests.asm	/^     ec8:	83 ec 08             	sub    $0x8,%esp$/;"	l
ec9	./sh.asm	/^ ec9:	5b                   	pop    %ebx$/;"	l
eca	./sh.asm	/^ eca:	5e                   	pop    %esi$/;"	l
ecb	./sh.asm	/^ ecb:	5f                   	pop    %edi$/;"	l
ecb	./usertests.asm	/^     ecb:	68 21 4b 00 00       	push   $0x4b21$/;"	l
ecc	./sh.asm	/^ ecc:	5d                   	pop    %ebp$/;"	l
ecd	./sh.asm	/^ ecd:	c3                   	ret    $/;"	l
ece	./sh.asm	/^ ece:	03 72 04             	add    0x4(%edx),%esi$/;"	l
echoargv	./usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecx	./mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	./x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	./grep.asm	/^  ed:	53                   	push   %ebx$/;"	l
ed	./init.asm	/^  ed:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ed	./stressfs.asm	/^  ed:	83 ec 04             	sub    $0x4,%esp$/;"	l
ed	./wc.asm	/^  ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
ed0	./usertests.asm	/^     ed0:	6a 01                	push   $0x1$/;"	l
ed1	./sh.asm	/^ ed1:	89 73 fc             	mov    %esi,-0x4(%ebx)$/;"	l
ed2	./usertests.asm	/^     ed2:	e8 4c 2a 00 00       	call   0x3923$/;"	l
ed4	./sh.asm	/^ ed4:	8b 10                	mov    (%eax),%edx$/;"	l
ed6	./sh.asm	/^ ed6:	8b 12                	mov    (%edx),%edx$/;"	l
ed7	./usertests.asm	/^     ed7:	e8 f6 28 00 00       	call   0x37d2$/;"	l
ed8	./sh.asm	/^ ed8:	89 53 f8             	mov    %edx,-0x8(%ebx)$/;"	l
edb	./sh.asm	/^ edb:	eb db                	jmp    0xeb8$/;"	l
edc	./usertests.asm	/^     edc:	89 c3                	mov    %eax,%ebx$/;"	l
edd	./sh.asm	/^ edd:	03 53 fc             	add    -0x4(%ebx),%edx$/;"	l
ede	./usertests.asm	/^     ede:	83 ec 08             	sub    $0x8,%esp$/;"	l
edi	./mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	./proc.h	/^  uint edi;$/;"	m	struct:context
edi	./x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	./mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	./x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	./date.asm	/^  ee:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx$/;"	l
ee	./dup2test.asm	/^  ee:	68 94 0a 00 00       	push   $0xa94$/;"	l
ee	./echo.asm	/^  ee:	0f b6 10             	movzbl (%eax),%edx$/;"	l
ee	./grep.asm	/^  ee:	83 c6 01             	add    $0x1,%esi$/;"	l
ee	./kill.asm	/^  ee:	55                   	push   %ebp$/;"	l
ee	./ls.asm	/^  ee:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax$/;"	l
ee	./mkdir.asm	/^  ee:	57                   	push   %edi$/;"	l
ee	./rm.asm	/^  ee:	57                   	push   %edi$/;"	l
ee0	./sh.asm	/^ ee0:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ee1	./usertests.asm	/^     ee1:	68 02 02 00 00       	push   $0x202$/;"	l
ee3	./sh.asm	/^ ee3:	8b 53 f8             	mov    -0x8(%ebx),%edx$/;"	l
ee6	./sh.asm	/^ ee6:	89 10                	mov    %edx,(%eax)$/;"	l
ee6	./usertests.asm	/^     ee6:	57                   	push   %edi$/;"	l
ee7	./usertests.asm	/^     ee7:	e8 26 29 00 00       	call   0x3812$/;"	l
ee8	./sh.asm	/^ ee8:	eb da                	jmp    0xec4$/;"	l
eea	./sh.asm	/^ eea:	55                   	push   %ebp$/;"	l
eeb	./sh.asm	/^ eeb:	89 e5                	mov    %esp,%ebp$/;"	l
eec	./usertests.asm	/^     eec:	89 c7                	mov    %eax,%edi$/;"	l
eed	./sh.asm	/^ eed:	53                   	push   %ebx$/;"	l
eee	./sh.asm	/^ eee:	83 ec 04             	sub    $0x4,%esp$/;"	l
eee	./usertests.asm	/^     eee:	83 c4 10             	add    $0x10,%esp$/;"	l
ef	./cat.asm	/^  ef:	6a 01                	push   $0x1$/;"	l
ef	./kill.asm	/^  ef:	89 e5                	mov    %esp,%ebp$/;"	l
ef	./ln.asm	/^  ef:	55                   	push   %ebp$/;"	l
ef	./mkdir.asm	/^  ef:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
ef	./rm.asm	/^  ef:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
ef	./zombie.asm	/^  ef:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
ef1	./sh.asm	/^ ef1:	89 c3                	mov    %eax,%ebx$/;"	l
ef1	./usertests.asm	/^     ef1:	85 c0                	test   %eax,%eax$/;"	l
ef3	./sh.asm	/^ ef3:	3d ff 0f 00 00       	cmp    $0xfff,%eax$/;"	l
ef3	./usertests.asm	/^     ef3:	78 40                	js     0xf35$/;"	l
ef5	./usertests.asm	/^     ef5:	83 ec 04             	sub    $0x4,%esp$/;"	l
ef8	./sh.asm	/^ ef8:	77 05                	ja     0xeff$/;"	l
ef8	./usertests.asm	/^     ef8:	68 00 02 00 00       	push   $0x200$/;"	l
efa	./sh.asm	/^ efa:	bb 00 10 00 00       	mov    $0x1000,%ebx$/;"	l
efd	./usertests.asm	/^     efd:	83 c6 30             	add    $0x30,%esi$/;"	l
eff	./sh.asm	/^ eff:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax$/;"	l
efile	./sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	./kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	./mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	./x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	./elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	./mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	./proc.h	/^  uint eip;$/;"	m	struct:context
eip	./x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	./elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	./elf.h	/^struct elfhdr {$/;"	s
empty	./kernel.asm	/^      empty = ip;$/;"	d
empty	./kernel.asm	/^  empty = 0;$/;"	d
end_op	./log.c	/^end_op(void)$/;"	f
entry	./elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	./entry.S	/^entry:$/;"	l
entry	./kernel.asm	/^entry:$/;"	l
entry	./mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entrypgdir	./main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	./main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
ep	./kernel.asm	/^  ep = (char*)curproc->sz;$/;"	d
epa	./bootblock.asm	/^  epa = pa + count;$/;"	d
eph	./bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	./x86.h	/^  uint err;$/;"	m	struct:trapframe
es	./mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	./x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	./mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	./proc.h	/^  uint esi;$/;"	m	struct:context
esi	./x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	./mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	./x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	./mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	./mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	./mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	./exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	./sh.c	/^execcmd(void)$/;"	f
execcmd	./sh.c	/^struct execcmd {$/;"	s	file:
exectest	./usertests.c	/^exectest(void)$/;"	f
exit	./initcode.S	/^exit:$/;"	l
exit	./initcode.asm	/^exit:$/;"	l
exit	./proc.c	/^exit(void)$/;"	f
exitiputtest	./usertests.c	/^exitiputtest(void)$/;"	f
exitwait	./usertests.c	/^exitwait(void)$/;"	f
f	./Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	./Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	./Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	./Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	./Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	./Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	./cat.asm	/^   f:	68 00 02 00 00       	push   $0x200$/;"	l
f	./date.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./dup2test.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./echo.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./forktest.asm	/^   f:	e8 35 01 00 00       	call   0x149$/;"	l
f	./init.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./kill.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./ln.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./ls.asm	/^   f:	53                   	push   %ebx$/;"	l
f	./mkdir.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./rm.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./sh.asm	/^   f:	83 ec 08             	sub    $0x8,%esp$/;"	l
f	./stressfs.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f	./usertests.asm	/^       f:	ff 35 10 5c 00 00    	pushl  0x5c10$/;"	l
f	./zombie.asm	/^   f:	89 e5                	mov    %esp,%ebp$/;"	l
f0	./forktest.asm	/^  f0:	e8 bd 01 00 00       	call   0x2b2$/;"	l
f0	./init.asm	/^  f0:	89 f0                	mov    %esi,%eax$/;"	l
f0	./ln.asm	/^  f0:	89 e5                	mov    %esp,%ebp$/;"	l
f0	./stressfs.asm	/^  f0:	68 00 02 00 00       	push   $0x200$/;"	l
f0	./usertests.asm	/^      f0:	ff 35 10 5c 00 00    	pushl  0x5c10$/;"	l
f0	./wc.asm	/^  f0:	8b 51 04             	mov    0x4(%ecx),%edx$/;"	l
f00	./usertests.asm	/^     f00:	56                   	push   %esi$/;"	l
f01	./usertests.asm	/^     f01:	68 00 84 00 00       	push   $0x8400$/;"	l
f06	./sh.asm	/^ f06:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f06	./usertests.asm	/^     f06:	e8 7a 27 00 00       	call   0x3685$/;"	l
f09	./sh.asm	/^ f09:	50                   	push   %eax$/;"	l
f0a	./sh.asm	/^ f0a:	e8 31 fd ff ff       	call   0xc40$/;"	l
f0b	./usertests.asm	/^     f0b:	83 c4 10             	add    $0x10,%esp$/;"	l
f0e	./usertests.asm	/^     f0e:	83 fb 0b             	cmp    $0xb,%ebx$/;"	l
f0f	./sh.asm	/^ f0f:	83 c4 10             	add    $0x10,%esp$/;"	l
f1	./cat.asm	/^  f1:	e8 18 03 00 00       	call   0x40e$/;"	l
f1	./echo.asm	/^  f1:	84 d2                	test   %dl,%dl$/;"	l
f1	./grep.asm	/^  f1:	56                   	push   %esi$/;"	l
f1	./kill.asm	/^  f1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1	./sh.asm	/^  f1:	e8 c2 0a 00 00       	call   0xbb8$/;"	l
f11	./usertests.asm	/^     f11:	7f 4b                	jg     0xf5e$/;"	l
f12	./sh.asm	/^ f12:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
f13	./usertests.asm	/^     f13:	83 ec 04             	sub    $0x4,%esp$/;"	l
f15	./sh.asm	/^ f15:	74 1c                	je     0xf33$/;"	l
f16	./usertests.asm	/^     f16:	68 f4 01 00 00       	push   $0x1f4$/;"	l
f17	./sh.asm	/^ f17:	89 58 04             	mov    %ebx,0x4(%eax)$/;"	l
f1a	./sh.asm	/^ f1a:	83 c0 08             	add    $0x8,%eax$/;"	l
f1b	./usertests.asm	/^     f1b:	68 00 84 00 00       	push   $0x8400$/;"	l
f1d	./sh.asm	/^ f1d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f2	./date.asm	/^  f2:	0f b6 10             	movzbl (%eax),%edx$/;"	l
f2	./grep.asm	/^  f2:	e8 55 ff ff ff       	call   0x4c$/;"	l
f2	./init.asm	/^  f2:	89 d1                	mov    %edx,%ecx$/;"	l
f2	./ln.asm	/^  f2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f2	./mkdir.asm	/^  f2:	89 d7                	mov    %edx,%edi$/;"	l
f2	./rm.asm	/^  f2:	89 d7                	mov    %edx,%edi$/;"	l
f2	./zombie.asm	/^  f2:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
f20	./sh.asm	/^ f20:	50                   	push   %eax$/;"	l
f20	./usertests.asm	/^     f20:	57                   	push   %edi$/;"	l
f21	./sh.asm	/^ f21:	e8 50 ff ff ff       	call   0xe76$/;"	l
f21	./usertests.asm	/^     f21:	e8 cc 28 00 00       	call   0x37f2$/;"	l
f26	./sh.asm	/^ f26:	a1 a4 16 00 00       	mov    0x16a4,%eax$/;"	l
f26	./usertests.asm	/^     f26:	83 c4 10             	add    $0x10,%esp$/;"	l
f29	./usertests.asm	/^     f29:	3d f4 01 00 00       	cmp    $0x1f4,%eax$/;"	l
f2b	./sh.asm	/^ f2b:	83 c4 10             	add    $0x10,%esp$/;"	l
f2e	./sh.asm	/^ f2e:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
f2e	./usertests.asm	/^     f2e:	75 19                	jne    0xf49$/;"	l
f3	./dup2test.asm	/^  f3:	6a 06                	push   $0x6$/;"	l
f3	./echo.asm	/^  f3:	74 09                	je     0xfe$/;"	l
f3	./wc.asm	/^  f3:	89 55 e0             	mov    %edx,-0x20(%ebp)$/;"	l
f30	./usertests.asm	/^     f30:	83 c3 01             	add    $0x1,%ebx$/;"	l
f31	./sh.asm	/^ f31:	c9                   	leave  $/;"	l
f32	./sh.asm	/^ f32:	c3                   	ret    $/;"	l
f33	./sh.asm	/^ f33:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f33	./usertests.asm	/^     f33:	eb d9                	jmp    0xf0e$/;"	l
f35	./usertests.asm	/^     f35:	83 ec 08             	sub    $0x8,%esp$/;"	l
f38	./sh.asm	/^ f38:	eb f4                	jmp    0xf2e$/;"	l
f38	./usertests.asm	/^     f38:	68 e7 42 00 00       	push   $0x42e7$/;"	l
f3a	./sh.asm	/^ f3a:	f3 0f 1e fb          	endbr32 $/;"	l
f3d	./usertests.asm	/^     f3d:	6a 01                	push   $0x1$/;"	l
f3e	./sh.asm	/^ f3e:	55                   	push   %ebp$/;"	l
f3f	./sh.asm	/^ f3f:	89 e5                	mov    %esp,%ebp$/;"	l
f3f	./usertests.asm	/^     f3f:	e8 df 29 00 00       	call   0x3923$/;"	l
f4	./init.asm	/^  f4:	83 c2 01             	add    $0x1,%edx$/;"	l
f4	./kill.asm	/^  f4:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx$/;"	l
f4	./ls.asm	/^  f4:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)$/;"	l
f4	./mkdir.asm	/^  f4:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
f4	./rm.asm	/^  f4:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
f41	./sh.asm	/^ f41:	53                   	push   %ebx$/;"	l
f42	./sh.asm	/^ f42:	83 ec 04             	sub    $0x4,%esp$/;"	l
f44	./usertests.asm	/^     f44:	e8 89 28 00 00       	call   0x37d2$/;"	l
f45	./sh.asm	/^ f45:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f48	./sh.asm	/^ f48:	8d 58 07             	lea    0x7(%eax),%ebx$/;"	l
f49	./usertests.asm	/^     f49:	83 ec 04             	sub    $0x4,%esp$/;"	l
f4b	./sh.asm	/^ f4b:	c1 eb 03             	shr    $0x3,%ebx$/;"	l
f4c	./usertests.asm	/^     f4c:	50                   	push   %eax$/;"	l
f4d	./usertests.asm	/^     f4d:	68 5c 40 00 00       	push   $0x405c$/;"	l
f4e	./sh.asm	/^ f4e:	83 c3 01             	add    $0x1,%ebx$/;"	l
f5	./date.asm	/^  f5:	84 d2                	test   %dl,%dl$/;"	l
f5	./dup2test.asm	/^  f5:	e8 66 05 00 00       	call   0x660$/;"	l
f5	./echo.asm	/^  f5:	38 ca                	cmp    %cl,%dl$/;"	l
f5	./forktest.asm	/^  f5:	f3 0f 1e fb          	endbr32 $/;"	l
f5	./ln.asm	/^  f5:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx$/;"	l
f5	./stressfs.asm	/^  f5:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax$/;"	l
f51	./sh.asm	/^ f51:	8b 0d a4 16 00 00    	mov    0x16a4,%ecx$/;"	l
f52	./usertests.asm	/^     f52:	6a 01                	push   $0x1$/;"	l
f54	./usertests.asm	/^     f54:	e8 ca 29 00 00       	call   0x3923$/;"	l
f57	./sh.asm	/^ f57:	85 c9                	test   %ecx,%ecx$/;"	l
f59	./sh.asm	/^ f59:	74 04                	je     0xf5f$/;"	l
f59	./usertests.asm	/^     f59:	e8 74 28 00 00       	call   0x37d2$/;"	l
f5b	./sh.asm	/^ f5b:	8b 01                	mov    (%ecx),%eax$/;"	l
f5d	./sh.asm	/^ f5d:	eb 4b                	jmp    0xfaa$/;"	l
f5e	./usertests.asm	/^     f5e:	e8 6f 28 00 00       	call   0x37d2$/;"	l
f5f	./sh.asm	/^ f5f:	c7 05 a4 16 00 00 a8 	movl   $0x16a8,0x16a4$/;"	l
f6	./cat.asm	/^  f6:	e8 c2 01 00 00       	call   0x2bd$/;"	l
f6	./sh.asm	/^  f6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f6	./usertests.asm	/^      f6:	e8 28 38 00 00       	call   0x3923$/;"	l
f6	./wc.asm	/^  f6:	83 f8 01             	cmp    $0x1,%eax$/;"	l
f63	./usertests.asm	/^     f63:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
f66	./sh.asm	/^ f66:	16 00 00 $/;"	l
f68	./usertests.asm	/^     f68:	eb 08                	jmp    0xf72$/;"	l
f69	./sh.asm	/^ f69:	c7 05 a8 16 00 00 a8 	movl   $0x16a8,0x16a8$/;"	l
f6a	./usertests.asm	/^     f6a:	e8 6b 28 00 00       	call   0x37da$/;"	l
f6f	./usertests.asm	/^     f6f:	83 c3 01             	add    $0x1,%ebx$/;"	l
f7	./date.asm	/^  f7:	74 09                	je     0x102$/;"	l
f7	./echo.asm	/^  f7:	74 0a                	je     0x103$/;"	l
f7	./grep.asm	/^  f7:	83 c4 10             	add    $0x10,%esp$/;"	l
f7	./init.asm	/^  f7:	89 c3                	mov    %eax,%ebx$/;"	l
f7	./mkdir.asm	/^  f7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f7	./rm.asm	/^  f7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f7	./zombie.asm	/^  f7:	89 de                	mov    %ebx,%esi$/;"	l
f70	./sh.asm	/^ f70:	16 00 00 $/;"	l
f72	./usertests.asm	/^     f72:	83 fb 03             	cmp    $0x3,%ebx$/;"	l
f73	./sh.asm	/^ f73:	c7 05 ac 16 00 00 00 	movl   $0x0,0x16ac$/;"	l
f75	./usertests.asm	/^     f75:	7e f3                	jle    0xf6a$/;"	l
f77	./usertests.asm	/^     f77:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
f7a	./sh.asm	/^ f7a:	00 00 00 $/;"	l
f7c	./usertests.asm	/^     f7c:	eb 75                	jmp    0xff3$/;"	l
f7d	./sh.asm	/^ f7d:	b9 a8 16 00 00       	mov    $0x16a8,%ecx$/;"	l
f7e	./usertests.asm	/^     f7e:	83 ec 08             	sub    $0x8,%esp$/;"	l
f8	./kill.asm	/^  f8:	0f b6 10             	movzbl (%eax),%edx$/;"	l
f81	./usertests.asm	/^     f81:	68 6d 40 00 00       	push   $0x406d$/;"	l
f82	./sh.asm	/^ f82:	eb d7                	jmp    0xf5b$/;"	l
f84	./sh.asm	/^ f84:	74 1a                	je     0xfa0$/;"	l
f86	./sh.asm	/^ f86:	29 da                	sub    %ebx,%edx$/;"	l
f86	./usertests.asm	/^     f86:	6a 01                	push   $0x1$/;"	l
f88	./sh.asm	/^ f88:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
f88	./usertests.asm	/^     f88:	e8 96 29 00 00       	call   0x3923$/;"	l
f8b	./sh.asm	/^ f8b:	8d 04 d0             	lea    (%eax,%edx,8),%eax$/;"	l
f8d	./usertests.asm	/^     f8d:	e8 40 28 00 00       	call   0x37d2$/;"	l
f8e	./sh.asm	/^ f8e:	89 58 04             	mov    %ebx,0x4(%eax)$/;"	l
f9	./date.asm	/^  f9:	38 ca                	cmp    %cl,%dl$/;"	l
f9	./echo.asm	/^  f9:	83 c0 01             	add    $0x1,%eax$/;"	l
f9	./forktest.asm	/^  f9:	55                   	push   %ebp$/;"	l
f9	./init.asm	/^  f9:	83 c0 01             	add    $0x1,%eax$/;"	l
f9	./ln.asm	/^  f9:	0f b6 10             	movzbl (%eax),%edx$/;"	l
f9	./sh.asm	/^  f9:	ff 73 14             	pushl  0x14(%ebx)$/;"	l
f9	./wc.asm	/^  f9:	7e 40                	jle    0x13b$/;"	l
f9	./zombie.asm	/^  f9:	83 c3 01             	add    $0x1,%ebx$/;"	l
f91	./sh.asm	/^ f91:	89 0d a4 16 00 00    	mov    %ecx,0x16a4$/;"	l
f92	./usertests.asm	/^     f92:	01 c6                	add    %eax,%esi$/;"	l
f94	./usertests.asm	/^     f94:	83 ec 04             	sub    $0x4,%esp$/;"	l
f97	./sh.asm	/^ f97:	83 c0 08             	add    $0x8,%eax$/;"	l
f97	./usertests.asm	/^     f97:	68 00 20 00 00       	push   $0x2000$/;"	l
f9a	./sh.asm	/^ f9a:	83 c4 04             	add    $0x4,%esp$/;"	l
f9c	./usertests.asm	/^     f9c:	68 00 84 00 00       	push   $0x8400$/;"	l
f9d	./sh.asm	/^ f9d:	5b                   	pop    %ebx$/;"	l
f9e	./sh.asm	/^ f9e:	5d                   	pop    %ebp$/;"	l
f9f	./sh.asm	/^ f9f:	c3                   	ret    $/;"	l
fa	./dup2test.asm	/^  fa:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)$/;"	l
fa	./forktest.asm	/^  fa:	89 e5                	mov    %esp,%ebp$/;"	l
fa	./grep.asm	/^  fa:	eb 22                	jmp    0x11e$/;"	l
fa	./ls.asm	/^  fa:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx$/;"	l
fa	./mkdir.asm	/^  fa:	fc                   	cld    $/;"	l
fa	./rm.asm	/^  fa:	fc                   	cld    $/;"	l
fa0	./sh.asm	/^ fa0:	8b 10                	mov    (%eax),%edx$/;"	l
fa1	./usertests.asm	/^     fa1:	ff 75 d4             	pushl  -0x2c(%ebp)$/;"	l
fa2	./sh.asm	/^ fa2:	89 11                	mov    %edx,(%ecx)$/;"	l
fa4	./sh.asm	/^ fa4:	eb eb                	jmp    0xf91$/;"	l
fa4	./usertests.asm	/^     fa4:	e8 41 28 00 00       	call   0x37ea$/;"	l
fa6	./sh.asm	/^ fa6:	89 c1                	mov    %eax,%ecx$/;"	l
fa8	./sh.asm	/^ fa8:	8b 00                	mov    (%eax),%eax$/;"	l
fa9	./usertests.asm	/^     fa9:	83 c4 10             	add    $0x10,%esp$/;"	l
faa	./sh.asm	/^ faa:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
fac	./usertests.asm	/^     fac:	85 c0                	test   %eax,%eax$/;"	l
fad	./sh.asm	/^ fad:	39 da                	cmp    %ebx,%edx$/;"	l
fae	./usertests.asm	/^     fae:	7e 1c                	jle    0xfcc$/;"	l
faf	./sh.asm	/^ faf:	73 d3                	jae    0xf84$/;"	l
fb	./cat.asm	/^  fb:	e8 bd 01 00 00       	call   0x2bd$/;"	l
fb	./date.asm	/^  fb:	74 0a                	je     0x107$/;"	l
fb	./kill.asm	/^  fb:	84 d2                	test   %dl,%dl$/;"	l
fb	./mkdir.asm	/^  fb:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
fb	./rm.asm	/^  fb:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
fb	./stressfs.asm	/^  fb:	50                   	push   %eax$/;"	l
fb	./usertests.asm	/^      fb:	e8 ca 36 00 00       	call   0x37ca$/;"	l
fb	./wc.asm	/^  fb:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
fb0	./usertests.asm	/^     fb0:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
fb1	./sh.asm	/^ fb1:	39 05 a4 16 00 00    	cmp    %eax,0x16a4$/;"	l
fb5	./usertests.asm	/^     fb5:	39 c2                	cmp    %eax,%edx$/;"	l
fb7	./sh.asm	/^ fb7:	75 ed                	jne    0xfa6$/;"	l
fb7	./usertests.asm	/^     fb7:	7d d9                	jge    0xf92$/;"	l
fb9	./sh.asm	/^ fb9:	89 d8                	mov    %ebx,%eax$/;"	l
fb9	./usertests.asm	/^     fb9:	0f be ba 00 84 00 00 	movsbl 0x8400(%edx),%edi$/;"	l
fbb	./sh.asm	/^ fbb:	e8 2a ff ff ff       	call   0xeea$/;"	l
fc	./echo.asm	/^  fc:	eb f0                	jmp    0xee$/;"	l
fc	./forktest.asm	/^  fc:	56                   	push   %esi$/;"	l
fc	./grep.asm	/^  fc:	89 d3                	mov    %edx,%ebx$/;"	l
fc	./init.asm	/^  fc:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
fc	./ln.asm	/^  fc:	84 d2                	test   %dl,%dl$/;"	l
fc	./sh.asm	/^  fc:	e8 df 0a 00 00       	call   0xbe0$/;"	l
fc	./stressfs.asm	/^  fc:	56                   	push   %esi$/;"	l
fc	./zombie.asm	/^  fc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
fc0	./sh.asm	/^ fc0:	85 c0                	test   %eax,%eax$/;"	l
fc0	./usertests.asm	/^     fc0:	8d 4b 30             	lea    0x30(%ebx),%ecx$/;"	l
fc2	./sh.asm	/^ fc2:	75 e2                	jne    0xfa6$/;"	l
fc3	./usertests.asm	/^     fc3:	39 cf                	cmp    %ecx,%edi$/;"	l
fc4	./sh.asm	/^ fc4:	eb d4                	jmp    0xf9a$/;"	l
fc5	./usertests.asm	/^     fc5:	75 b7                	jne    0xf7e$/;"	l
fc7	./usertests.asm	/^     fc7:	83 c2 01             	add    $0x1,%edx$/;"	l
fca	./usertests.asm	/^     fca:	eb e9                	jmp    0xfb5$/;"	l
fcc	./usertests.asm	/^     fcc:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fcf	./usertests.asm	/^     fcf:	ff 75 d4             	pushl  -0x2c(%ebp)$/;"	l
fd	./date.asm	/^  fd:	83 c0 01             	add    $0x1,%eax$/;"	l
fd	./forktest.asm	/^  fd:	53                   	push   %ebx$/;"	l
fd	./kill.asm	/^  fd:	74 09                	je     0x108$/;"	l
fd	./mkdir.asm	/^  fd:	89 d0                	mov    %edx,%eax$/;"	l
fd	./rm.asm	/^  fd:	89 d0                	mov    %edx,%eax$/;"	l
fd	./sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	./stressfs.asm	/^  fd:	e8 f3 01 00 00       	call   0x2f5$/;"	l
fd0	./kernel.asm	/^  fd0 = -1;$/;"	d
fd2	./usertests.asm	/^     fd2:	e8 23 28 00 00       	call   0x37fa$/;"	l
fd7	./usertests.asm	/^     fd7:	83 c4 10             	add    $0x10,%esp$/;"	l
fda	./usertests.asm	/^     fda:	81 fe 70 17 00 00    	cmp    $0x1770,%esi$/;"	l
fdalloc	./sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fe	./echo.asm	/^  fe:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fe	./forktest.asm	/^  fe:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
fe	./grep.asm	/^  fe:	83 ec 08             	sub    $0x8,%esp$/;"	l
fe	./ln.asm	/^  fe:	74 09                	je     0x109$/;"	l
fe0	./usertests.asm	/^     fe0:	75 38                	jne    0x101a$/;"	l
fe2	./usertests.asm	/^     fe2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fe5	./usertests.asm	/^     fe5:	ff 75 d0             	pushl  -0x30(%ebp)$/;"	l
fe8	./usertests.asm	/^     fe8:	e8 35 28 00 00       	call   0x3822$/;"	l
feature	./mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
fed	./usertests.asm	/^     fed:	83 c3 01             	add    $0x1,%ebx$/;"	l
fetchint	./syscall.c	/^fetchint(uint addr, int *ip)$/;"	f
fetchstr	./syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f
ff	./init.asm	/^  ff:	88 0b                	mov    %cl,(%ebx)$/;"	l
ff	./kernel.asm	/^  ff = *f;$/;"	d
ff	./kill.asm	/^  ff:	38 ca                	cmp    %cl,%dl$/;"	l
ff	./mkdir.asm	/^  ff:	5f                   	pop    %edi$/;"	l
ff	./rm.asm	/^  ff:	5f                   	pop    %edi$/;"	l
ff	./zombie.asm	/^  ff:	7d 2e                	jge    0x12f$/;"	l
ff0	./usertests.asm	/^     ff0:	83 c4 10             	add    $0x10,%esp$/;"	l
ff3	./usertests.asm	/^     ff3:	83 fb 01             	cmp    $0x1,%ebx$/;"	l
ff6	./usertests.asm	/^     ff6:	7f 37                	jg     0x102f$/;"	l
ff8	./usertests.asm	/^     ff8:	8b 44 9d d8          	mov    -0x28(%ebp,%ebx,4),%eax$/;"	l
ffc	./usertests.asm	/^     ffc:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
fff	./usertests.asm	/^     fff:	83 ec 08             	sub    $0x8,%esp$/;"	l
file	./file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon4	typeref:struct:__anon4::file	file:
file	./file.h	/^struct file {$/;"	s
file	./sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	./file.c	/^filealloc(void)$/;"	f
fileclose	./file.c	/^fileclose(struct file *f)$/;"	f
filedup	./file.c	/^filedup(struct file *f)$/;"	f
fileinit	./file.c	/^fileinit(void)$/;"	f
fileread	./file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	./file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	./elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	./file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	./lapic.c	/^fill_rtcdate(struct rtcdate *r)$/;"	f	file:
first	./kernel.asm	/^    first = 0;$/;"	d
flags	./buf.h	/^  int flags;$/;"	m	struct:buf
flags	./elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	./elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	./kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	./mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	./mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	./ls.c	/^fmtname(char *path)$/;"	f
fork	./proc.c	/^fork(void)$/;"	f
fork1	./sh.c	/^fork1(void)$/;"	f
forkret	./proc.c	/^forkret(void)$/;"	f
forktest	./exitwait.c	/^forktest(void)$/;"	f
forktest	./forktest.c	/^forktest(void)$/;"	f
forktest	./usertests.c	/^forktest(void)$/;"	f
fourfiles	./usertests.c	/^fourfiles(void)$/;"	f
fourteen	./usertests.c	/^fourteen(void)$/;"	f
free	./umalloc.c	/^free(void *ap)$/;"	f
freeblock	./mkfs.c	/^uint freeblock;$/;"	v
freeinode	./mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	./kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon7	typeref:struct:__anon7::run	file:
freep	./umalloc.c	/^static Header *freep;$/;"	v	file:
freerange	./kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	./vm.c	/^freevm(pde_t *pgdir)$/;"	f
fs	./mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	./x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	./mkfs.c	/^int fsfd;$/;"	v
fsfull	./usertests.c	/^fsfull()$/;"	f
ftable	./file.c	/^} ftable;$/;"	v	typeref:struct:__anon4
g	./mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	./mmu.h	/^struct gatedesc {$/;"	s
gdt	./bootasm.S	/^gdt:$/;"	l
gdt	./entryother.S	/^gdt:$/;"	l
gdt	./proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdtdesc	./bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	./entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	./spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	./sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	./ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	./sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	./grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	./proc.c	/^growproc(int n)$/;"	f
gs	./mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	./x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	./ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	./kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	./kernel.asm	/^      havekids = 1;$/;"	d
havekids	./kernel.asm	/^    havekids = 0;$/;"	d
head	./bio.c	/^  struct buf head;$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
header	./umalloc.c	/^union header {$/;"	u	file:
holding	./spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holdingsleep	./sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	./date.h	/^  uint hour;$/;"	m	struct:rtcdate
i	./kernel.asm	/^  i = 0;$/;"	d
ialloc	./fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	./mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	./mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	./fs.c	/^} icache;$/;"	v	typeref:struct:__anon6
id	./kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
ideinit	./ide.c	/^ideinit(void)$/;"	f
ideinit	./memide.c	/^ideinit(void)$/;"	f
ideintr	./ide.c	/^ideintr(void)$/;"	f
ideintr	./memide.c	/^ideintr(void)$/;"	f
idelock	./ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	./ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	./kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	./ide.c	/^iderw(struct buf *b)$/;"	f
iderw	./memide.c	/^iderw(struct buf *b)$/;"	f
idestart	./ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	./ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	./trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	./trap.c	/^idtinit(void)$/;"	f
idup	./fs.c	/^idup(struct inode *ip)$/;"	f
iget	./fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	./fs.c	/^iinit(int dev)$/;"	f
ilock	./fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	./mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	./x86.h	/^inb(ushort port)$/;"	f
init	./initcode.S	/^init:$/;"	l
initlock	./spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	./log.c	/^initlog(int dev)$/;"	f
initproc	./kernel.asm	/^  initproc = p;$/;"	d
initproc	./proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initsleeplock	./sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
inituvm	./vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	./stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	./file.h	/^struct inode {$/;"	s
inode	./fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon6	typeref:struct:__anon6::inode	file:
inodestart	./fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	./console.c	/^} input;$/;"	v	typeref:struct:__anon3
insl	./x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	./log.c	/^install_trans(void)$/;"	f	file:
int	./kernel.asm	/^int ncpu;$/;"	l
int	./kernel.asm	/^int$/;"	l
intena	./kernel.asm	/^  intena = mycpu()->intena;$/;"	d
intena	./proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	./file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	./fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	./kernel.asm	/^      inum = de.inum;$/;"	d
ioapic	./ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	./ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	./kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	./ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	./kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	./mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	./ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	./ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	./ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	./mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	./file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	./kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	./kernel.asm	/^    ip = idup(myproc()->cwd);$/;"	d
ip	./kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	./kernel.asm	/^    ip = next;$/;"	d
ip	./kernel.asm	/^  ip = 0;$/;"	d
iput	./fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	./usertests.c	/^iputtest(void)$/;"	f
iref	./usertests.c	/^iref(void)$/;"	f
isdirempty	./sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
ismp	./kernel.asm	/^      ismp = 0;$/;"	d
ismp	./kernel.asm	/^  ismp = 1;$/;"	d
itrunc	./fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	./fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	./fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	./fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	./kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	./kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	./kbd.c	/^kbdintr(void)$/;"	f
kernel	./kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kfree	./kalloc.c	/^kfree(char *v)$/;"	f
kill	./proc.c	/^kill(int pid)$/;"	f
killed	./proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	./kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	./kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmap	./vm.c	/^static struct kmap {$/;"	s	file:
kmap	./vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmem	./kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon7
kpgdir	./kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	./vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kstack	./proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	./vm.c	/^kvmalloc(void)$/;"	f
lapic	./kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	./lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	./mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	./lapic.c	/^lapiceoi(void)$/;"	f
lapicid	./lapic.c	/^lapicid(void)$/;"	f
lapicinit	./lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	./lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	./lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	./kernel.asm	/^      last = s+1;$/;"	d
last	./kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lcr3	./x86.h	/^lcr3(uint val)$/;"	f
ldt	./mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	./sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	./sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	./kernel.asm	/^  len = path - s;$/;"	d
length	./mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	./mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	./x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	./log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	./x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	./mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	./mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	./mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	./usertests.c	/^linktest(void)$/;"	f
linkunlink	./usertests.c	/^linkunlink()$/;"	f
listcmd	./sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	./sh.c	/^struct listcmd {$/;"	s	file:
lk	./sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
loadgs	./x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	./vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
lock	./bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	./buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	./console.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	./file.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	./file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	./fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	./kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	./log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	./pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	./proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
locked	./sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	./spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	./console.c	/^  int locking;$/;"	m	struct:__anon2	file:
locking	./kernel.asm	/^  locking = cons.locking;$/;"	d
log	./log.c	/^struct log log;$/;"	v	typeref:struct:log
log	./log.c	/^struct log {$/;"	s	file:
log_write	./log.c	/^log_write(struct buf *b)$/;"	f
logheader	./log.c	/^struct logheader {$/;"	s	file:
logstart	./fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	./ls.c	/^ls(char *path)$/;"	f
ltr	./x86.h	/^ltr(ushort sel)$/;"	f
m	./kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	./kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	./kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
machine	./elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	./elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	./cat.c	/^main(int argc, char *argv[])$/;"	f
main	./date.c	/^int main(int argc, char *argv[])$/;"	f
main	./dup2test.c	/^main(int argc, char* argv[])$/;"	f
main	./echo.c	/^main(int argc, char *argv[])$/;"	f
main	./exitwait.c	/^main(void)$/;"	f
main	./forktest.c	/^main(void)$/;"	f
main	./grep.c	/^main(int argc, char *argv[])$/;"	f
main	./init.c	/^main(void)$/;"	f
main	./kill.c	/^main(int argc, char **argv)$/;"	f
main	./ln.c	/^main(int argc, char *argv[])$/;"	f
main	./ls.c	/^main(int argc, char *argv[])$/;"	f
main	./main.c	/^main(void)$/;"	f
main	./mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	./mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	./rm.c	/^main(int argc, char *argv[])$/;"	f
main	./sh.c	/^main(void)$/;"	f
main	./stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	./usertests.c	/^main(int argc, char *argv[])$/;"	f
main	./wc.c	/^main(int argc, char *argv[])$/;"	f
main	./zombie.c	/^main(void)$/;"	f
major	./file.h	/^  short major;$/;"	m	struct:inode
major	./fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	./umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	./vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
match	./grep.c	/^match(char *re, char *text)$/;"	f
matchhere	./grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	./grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	./kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	./kernel.asm	/^    mem = kalloc();$/;"	d
mem	./kernel.asm	/^  mem = kalloc();$/;"	d
mem	./usertests.c	/^mem(void)$/;"	f
memcmp	./string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	./string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	./memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	./string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	./ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f
memset	./string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	./ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	./elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	./lapic.c	/^microdelay(int us)$/;"	f
min	./fs.c	24;"	d	file:
min	./mkfs.c	253;"	d	file:
minor	./file.h	/^  short minor;$/;"	m	struct:inode
minor	./fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	./date.h	/^  uint minute;$/;"	m	struct:rtcdate
mode	./sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	./date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	./umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	./mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	./mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	./mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	./main.c	/^mpenter(void)$/;"	f	file:
mpinit	./mp.c	/^mpinit(void)$/;"	f
mpioapic	./mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	./main.c	/^mpmain(void)$/;"	f	file:
mpproc	./mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	./mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	./mp.c	/^mpsearch1(uint a, int len)$/;"	f	file:
multiboot_header	./entry.S	/^multiboot_header:$/;"	l
mycpu	./proc.c	/^mycpu(void)$/;"	f
myproc	./proc.c	/^myproc(void) {$/;"	f
n	./kernel.asm	/^      n = PGSIZE;$/;"	d
n	./kernel.asm	/^      n = len;$/;"	d
n	./kernel.asm	/^      n = sz - i;$/;"	d
n	./kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	./kernel.asm	/^    n = ip->size - off;$/;"	d
n	./log.c	/^  int n;$/;"	m	struct:logheader	file:
n1	./kernel.asm	/^        n1 = max;$/;"	d
name	./fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	./proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	./sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	./spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	./usertests.c	/^char name[3];$/;"	v
name	./usys.S	/^  name: \\$/;"	l
namecmp	./fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	./fs.c	/^namei(char *path)$/;"	f
nameiparent	./fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	./fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	./mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	./fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	./mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
ncli	./proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	./mp.c	/^int ncpu;$/;"	v
next	./buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	./kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	./proc.c	/^int nextpid = 1;$/;"	v
ninodeblocks	./mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	./fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	./file.h	/^  short nlink;$/;"	m	struct:inode
nlink	./fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	./stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	./fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	./mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	./mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
normalmap	./kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	./pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nulterminate	./sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	./kernel.asm	/^  num = curproc->tf->eax;$/;"	d
nwrite	./pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	./mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	./mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	./x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	./elf.h	/^  uint off;$/;"	m	struct:proghdr
off	./file.h	/^  uint off;$/;"	m	struct:file
off_15_0	./mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	./mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	./bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	./proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldpgdir	./kernel.asm	/^  oldpgdir = curproc->pgdir;$/;"	d
openiputtest	./usertests.c	/^openiputtest(void)$/;"	f
opentest	./usertests.c	/^opentest(void)$/;"	f
os	./kernel.asm	/^  os = s;$/;"	d
outb	./x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	./x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	./log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	./x86.h	/^outw(ushort port, ushort data)$/;"	f
p	./kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	./kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	./kernel.asm	/^  p = 0;$/;"	d
p	./kernel.asm	/^  p = allocproc();$/;"	d
p	./kernel.asm	/^  p = c->proc;$/;"	d
p	./mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	./mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
pa	./bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	./kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	./kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	./kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	./ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	./runoff	/^pad()$/;"	f
padding1	./mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	./x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	./mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	./mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	./x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	./mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	./x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	./mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	./x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	./mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	./x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	./mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	./x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	./mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	./mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	./mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	./elf.h	/^  uint paddr;$/;"	m	struct:proghdr
panic	./console.c	/^panic(char *s)$/;"	f
panic	./sh.c	/^panic(char *s)$/;"	f
panicked	./console.c	/^static int panicked = 0;$/;"	v	file:
panicked	./kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	./proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	./sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	./sh.c	/^parsecmd(char *s)$/;"	f
parseexec	./sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	./sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	./sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	./sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pcs	./spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pde	./kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	./kernel.asm	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	l
pde_t	./types.h	/^typedef uint pde_t;$/;"	t
peek	./sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
perm	./vm.c	/^  int perm;$/;"	m	struct:kmap	file:
pgdir	./kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	./proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	./kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
ph	./bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	./elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	./elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	./elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phys_end	./vm.c	/^  uint phys_end;$/;"	m	struct:kmap	file:
phys_start	./vm.c	/^  uint phys_start;$/;"	m	struct:kmap	file:
physaddr	./mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picinit	./picirq.c	/^picinit(void)$/;"	f
pid	./kernel.asm	/^        pid = p->pid;$/;"	d
pid	./kernel.asm	/^  pid = np->pid;$/;"	d
pid	./proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	./sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pinit	./proc.c	/^pinit(void)$/;"	f
pipe	./file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	./pipe.c	/^struct pipe {$/;"	s	file:
pipe1	./usertests.c	/^pipe1(void)$/;"	f
pipealloc	./pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	./pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	./sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	./sh.c	/^struct pipecmd {$/;"	s	file:
piperead	./pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	./pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
popcli	./spinlock.c	/^popcli(void)$/;"	f
pos	./kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
preempt	./usertests.c	/^preempt(void)$/;"	f
prev	./buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	./forktest.c	/^printf(int fd, const char *s, ...)$/;"	f
printf	./printf.c	/^printf(int fd, const char *fmt, ...)$/;"	f
printint	./console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	./printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
proc	./proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon8	typeref:struct:__anon8::proc	file:
proc	./proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	./proc.h	/^struct proc {$/;"	s
procdump	./proc.c	/^procdump(void)$/;"	f
procstate	./proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	./mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	./elf.h	/^struct proghdr {$/;"	s
ptable	./proc.c	/^} ptable;$/;"	v	typeref:struct:__anon8
pte	./kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	./kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	./mmu.h	/^typedef uint pte_t;$/;"	t
ptr	./umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon9	typeref:union:header::__anon9::header	file:
pushcli	./spinlock.c	/^pushcli(void)$/;"	f
putc	./printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	./buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	./console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon3	file:
r	./kernel.asm	/^  r = (struct run*)v;$/;"	d
r	./kernel.asm	/^  r = kmem.freelist;$/;"	d
r	./kernel.asm	/^  r = lk->locked && (lk->pid == myproc()->pid);$/;"	d
r	./kernel.asm	/^  r = lock->locked && lock->cpu == mycpu();$/;"	d
rand	./usertests.c	/^rand()$/;"	f
randstate	./usertests.c	/^unsigned long randstate = 1;$/;"	v
rcr2	./x86.h	/^rcr2(void)$/;"	f
read	./file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	./log.c	/^read_head(void)$/;"	f	file:
readable	./file.h	/^  char readable;$/;"	m	struct:file
readeflags	./x86.h	/^readeflags(void)$/;"	f
readi	./fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	./pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	./fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	./bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	./bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	./log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	./sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	./sh.c	/^struct redircmd {$/;"	s	file:
ref	./file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	./file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
refcnt	./buf.h	/^  uint refcnt;$/;"	m	struct:buf
reg	./ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	./spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	./sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reserved	./mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	./mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	./mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
return	./kernel.asm	/^  return d;$/;"	d
right	./sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	./sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	./mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	./usertests.c	/^rmdot(void)$/;"	f
rsect	./mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	./mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	./mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rtcdate	./date.h	/^struct rtcdate {$/;"	s
run	./kalloc.c	/^struct run {$/;"	s	file:
runcmd	./sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	./kernel.asm	/^        s = "(null)";$/;"	d
s	./kernel.asm	/^  s = path;$/;"	d
s	./kernel.asm	/^  s = src;$/;"	d
s	./mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	./mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	./umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon9	file:
s1	./kernel.asm	/^  s1 = v1;$/;"	d
s2	./kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	./string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	./fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	./kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	./mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	./usertests.c	/^sbrktest(void)$/;"	f
sched	./proc.c	/^sched(void)$/;"	f
scheduler	./proc.c	/^scheduler(void)$/;"	f
scheduler	./proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	./date.h	/^  uint second;$/;"	m	struct:rtcdate
segdesc	./mmu.h	/^struct segdesc {$/;"	s
seginit	./vm.c	/^seginit(void)$/;"	f
setupkvm	./vm.c	/^setupkvm(void)$/;"	f
sharedfd	./usertests.c	/^sharedfd(void)$/;"	f
shentsize	./elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	./kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	./kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	./elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	./elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	./elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	./mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	./mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	./mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	./file.h	/^  uint size;$/;"	m	struct:inode
size	./fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	./fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	./log.c	/^  int size;$/;"	m	struct:log	file:
size	./stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	./umalloc.c	/^    uint size;$/;"	m	struct:header::__anon9	file:
skipelem	./fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	./proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	./sleeplock.h	/^struct sleeplock {$/;"	s
sp	./kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
specrev	./mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	./bootasm.S	/^spin:$/;"	l
spin	./bootblock.asm	/^spin:$/;"	l
spin	./entryother.S	/^spin:$/;"	l
spin	./entryother.asm	/^spin:$/;"	l
spinlock	./spinlock.h	/^struct spinlock {$/;"	s
ss	./mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	./x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	./mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	./mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	./mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	./kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	./kernel.asm	/^    stack = kalloc();$/;"	d
start	./bootasm.S	/^start:$/;"	l
start	./bootblock.asm	/^start:$/;"	l
start	./entryother.S	/^start:$/;"	l
start	./entryother.asm	/^start:$/;"	l
start	./initcode.S	/^start:$/;"	l
start	./initcode.asm	/^start:$/;"	l
start	./log.c	/^  int start;$/;"	m	struct:log	file:
start32	./bootasm.S	/^start32:$/;"	l
start32	./bootblock.asm	/^start32:$/;"	l
start32	./entryother.S	/^start32:$/;"	l
start32	./entryother.asm	/^start32:$/;"	l
started	./proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	./main.c	/^startothers(void)$/;"	f	file:
stat	./mkfs.c	8;"	d	file:
stat	./stat.h	/^struct stat {$/;"	s
stat	./ulib.c	/^stat(const char *n, struct stat *st)$/;"	f
state	./kernel.asm	/^      state = "???";$/;"	d
state	./kernel.asm	/^      state = states[p->state];$/;"	d
state	./proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
stati	./fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	./bootblock.asm	/^static inline uchar$/;"	l
static	./bootblock.asm	/^static inline void$/;"	l
static	./kernel.asm	/^static char*$/;"	l
static	./kernel.asm	/^static inline void$/;"	l
static	./kernel.asm	/^static int$/;"	l
static	./kernel.asm	/^static pte_t *$/;"	l
static	./kernel.asm	/^static struct buf*$/;"	t
static	./kernel.asm	/^static struct inode*$/;"	t
static	./kernel.asm	/^static struct mp*$/;"	t
static	./kernel.asm	/^static struct mpconf*$/;"	t
static	./kernel.asm	/^static uchar$/;"	l
static	./kernel.asm	/^static uint$/;"	l
static	./kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	./kernel.asm	/^static void$/;"	l
static_assert	./mkfs.c	15;"	d	file:
stdout	./usertests.c	/^int stdout = 1;$/;"	v
sti	./x86.h	/^sti(void)$/;"	f
stosb	./x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	./x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	./ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	./ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	./ulib.c	/^strcpy(char *s, const char *t)$/;"	f
strlen	./string.c	/^strlen(const char *s)$/;"	f
strlen	./ulib.c	/^strlen(const char *s)$/;"	f
strncmp	./string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	./string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	./kernel.asm	/^  struct proc *curproc = myproc();$/;"	l
struct	./kernel.asm	/^  struct proc *p = myproc();$/;"	l
struct	./kernel.asm	/^  struct proc *p;$/;"	l
subdir	./usertests.c	/^subdir(void)$/;"	f
sum	./kernel.asm	/^  sum = 0;$/;"	d
sum	./mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	./fs.h	/^struct superblock {$/;"	s
switchkvm	./vm.c	/^switchkvm(void)$/;"	f
switchuvm	./vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	./kernel.asm	/^swtch:$/;"	l
swtch	./swtch.S	/^swtch:$/;"	l
symbols	./sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	./sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	./sysfile.c	/^sys_close(void)$/;"	f
sys_date	./sysproc.c	/^sys_date(void)$/;"	f
sys_dup	./sysfile.c	/^sys_dup(void)$/;"	f
sys_dup2	./sysfile.c	/^sys_dup2(void)$/;"	f
sys_exec	./sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	./sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	./sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	./sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	./sysproc.c	/^sys_getpid(void)$/;"	f
sys_kill	./sysproc.c	/^sys_kill(void)$/;"	f
sys_link	./sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	./sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	./sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	./sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	./sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	./sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	./sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	./sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	./sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	./sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	./sysproc.c	/^sys_wait(void)$/;"	f
sys_write	./sysfile.c	/^sys_write(void)$/;"	f
syscall	./syscall.c	/^syscall(void)$/;"	f
syscalls	./syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	./kernel.asm	/^  sz = 0;$/;"	d
sz	./kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	./kernel.asm	/^  sz = curproc->sz;$/;"	d
sz	./proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	./mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	./kernel.asm	/^  target = n;$/;"	d
taskstate	./mmu.h	/^struct taskstate {$/;"	s
tf	./proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	./trap.c	/^uint ticks;$/;"	v
ticks0	./kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	./trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	./kbd.h	/^static uchar togglecode[256] =$/;"	v
trap	./trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	./x86.h	/^struct trapframe {$/;"	s
trapno	./x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	./kernel.asm	/^trapret:$/;"	l
trapret	./trapasm.S	/^trapret:$/;"	l
ts	./proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	./trap.c	/^tvinit(void)$/;"	f
type	./elf.h	/^  uint type;$/;"	m	struct:proghdr
type	./elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	./file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon5
type	./file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	./fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	./mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc
type	./mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	./mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	./mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	./mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	./sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	./sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	./sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	./sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	./sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	./sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	./stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	./kernel.asm	/^  uart = 1;$/;"	d
uart	./uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	./uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	./uart.c	/^uartinit(void)$/;"	f
uartintr	./uart.c	/^uartintr(void)$/;"	f
uartputc	./uart.c	/^uartputc(int c)$/;"	f
uchar	./kernel.asm	/^uchar ioapicid;$/;"	l
uchar	./types.h	/^typedef unsigned char  uchar;$/;"	t
uint	./kernel.asm	/^uint ticks;$/;"	l
uint	./types.h	/^typedef unsigned int   uint;$/;"	t
uio	./usertests.c	/^uio()$/;"	f
uninit	./usertests.c	/^char uninit[10000];$/;"	v
unlinkread	./usertests.c	/^unlinkread(void)$/;"	f
use_lock	./kalloc.c	/^  int use_lock;$/;"	m	struct:__anon7	file:
userinit	./proc.c	/^userinit(void)$/;"	f
ushort	./types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	./vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
va	./kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	./kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	./elf.h	/^  uint vaddr;$/;"	m	struct:proghdr
valid	./file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode
validateint	./usertests.c	/^validateint(int *p)$/;"	f
validatetest	./usertests.c	/^validatetest(void)$/;"	f
vector0	./kernel.asm	/^vector0:$/;"	l
vector0	./vectors.S	/^vector0:$/;"	l
vector1	./kernel.asm	/^vector1:$/;"	l
vector1	./vectors.S	/^vector1:$/;"	l
vector10	./kernel.asm	/^vector10:$/;"	l
vector10	./vectors.S	/^vector10:$/;"	l
vector100	./kernel.asm	/^vector100:$/;"	l
vector100	./vectors.S	/^vector100:$/;"	l
vector101	./kernel.asm	/^vector101:$/;"	l
vector101	./vectors.S	/^vector101:$/;"	l
vector102	./kernel.asm	/^vector102:$/;"	l
vector102	./vectors.S	/^vector102:$/;"	l
vector103	./kernel.asm	/^vector103:$/;"	l
vector103	./vectors.S	/^vector103:$/;"	l
vector104	./kernel.asm	/^vector104:$/;"	l
vector104	./vectors.S	/^vector104:$/;"	l
vector105	./kernel.asm	/^vector105:$/;"	l
vector105	./vectors.S	/^vector105:$/;"	l
vector106	./kernel.asm	/^vector106:$/;"	l
vector106	./vectors.S	/^vector106:$/;"	l
vector107	./kernel.asm	/^vector107:$/;"	l
vector107	./vectors.S	/^vector107:$/;"	l
vector108	./kernel.asm	/^vector108:$/;"	l
vector108	./vectors.S	/^vector108:$/;"	l
vector109	./kernel.asm	/^vector109:$/;"	l
vector109	./vectors.S	/^vector109:$/;"	l
vector11	./kernel.asm	/^vector11:$/;"	l
vector11	./vectors.S	/^vector11:$/;"	l
vector110	./kernel.asm	/^vector110:$/;"	l
vector110	./vectors.S	/^vector110:$/;"	l
vector111	./kernel.asm	/^vector111:$/;"	l
vector111	./vectors.S	/^vector111:$/;"	l
vector112	./kernel.asm	/^vector112:$/;"	l
vector112	./vectors.S	/^vector112:$/;"	l
vector113	./kernel.asm	/^vector113:$/;"	l
vector113	./vectors.S	/^vector113:$/;"	l
vector114	./kernel.asm	/^vector114:$/;"	l
vector114	./vectors.S	/^vector114:$/;"	l
vector115	./kernel.asm	/^vector115:$/;"	l
vector115	./vectors.S	/^vector115:$/;"	l
vector116	./kernel.asm	/^vector116:$/;"	l
vector116	./vectors.S	/^vector116:$/;"	l
vector117	./kernel.asm	/^vector117:$/;"	l
vector117	./vectors.S	/^vector117:$/;"	l
vector118	./kernel.asm	/^vector118:$/;"	l
vector118	./vectors.S	/^vector118:$/;"	l
vector119	./kernel.asm	/^vector119:$/;"	l
vector119	./vectors.S	/^vector119:$/;"	l
vector12	./kernel.asm	/^vector12:$/;"	l
vector12	./vectors.S	/^vector12:$/;"	l
vector120	./kernel.asm	/^vector120:$/;"	l
vector120	./vectors.S	/^vector120:$/;"	l
vector121	./kernel.asm	/^vector121:$/;"	l
vector121	./vectors.S	/^vector121:$/;"	l
vector122	./kernel.asm	/^vector122:$/;"	l
vector122	./vectors.S	/^vector122:$/;"	l
vector123	./kernel.asm	/^vector123:$/;"	l
vector123	./vectors.S	/^vector123:$/;"	l
vector124	./kernel.asm	/^vector124:$/;"	l
vector124	./vectors.S	/^vector124:$/;"	l
vector125	./kernel.asm	/^vector125:$/;"	l
vector125	./vectors.S	/^vector125:$/;"	l
vector126	./kernel.asm	/^vector126:$/;"	l
vector126	./vectors.S	/^vector126:$/;"	l
vector127	./kernel.asm	/^vector127:$/;"	l
vector127	./vectors.S	/^vector127:$/;"	l
vector128	./kernel.asm	/^vector128:$/;"	l
vector128	./vectors.S	/^vector128:$/;"	l
vector129	./kernel.asm	/^vector129:$/;"	l
vector129	./vectors.S	/^vector129:$/;"	l
vector13	./kernel.asm	/^vector13:$/;"	l
vector13	./vectors.S	/^vector13:$/;"	l
vector130	./kernel.asm	/^vector130:$/;"	l
vector130	./vectors.S	/^vector130:$/;"	l
vector131	./kernel.asm	/^vector131:$/;"	l
vector131	./vectors.S	/^vector131:$/;"	l
vector132	./kernel.asm	/^vector132:$/;"	l
vector132	./vectors.S	/^vector132:$/;"	l
vector133	./kernel.asm	/^vector133:$/;"	l
vector133	./vectors.S	/^vector133:$/;"	l
vector134	./kernel.asm	/^vector134:$/;"	l
vector134	./vectors.S	/^vector134:$/;"	l
vector135	./kernel.asm	/^vector135:$/;"	l
vector135	./vectors.S	/^vector135:$/;"	l
vector136	./kernel.asm	/^vector136:$/;"	l
vector136	./vectors.S	/^vector136:$/;"	l
vector137	./kernel.asm	/^vector137:$/;"	l
vector137	./vectors.S	/^vector137:$/;"	l
vector138	./kernel.asm	/^vector138:$/;"	l
vector138	./vectors.S	/^vector138:$/;"	l
vector139	./kernel.asm	/^vector139:$/;"	l
vector139	./vectors.S	/^vector139:$/;"	l
vector14	./kernel.asm	/^vector14:$/;"	l
vector14	./vectors.S	/^vector14:$/;"	l
vector140	./kernel.asm	/^vector140:$/;"	l
vector140	./vectors.S	/^vector140:$/;"	l
vector141	./kernel.asm	/^vector141:$/;"	l
vector141	./vectors.S	/^vector141:$/;"	l
vector142	./kernel.asm	/^vector142:$/;"	l
vector142	./vectors.S	/^vector142:$/;"	l
vector143	./kernel.asm	/^vector143:$/;"	l
vector143	./vectors.S	/^vector143:$/;"	l
vector144	./kernel.asm	/^vector144:$/;"	l
vector144	./vectors.S	/^vector144:$/;"	l
vector145	./kernel.asm	/^vector145:$/;"	l
vector145	./vectors.S	/^vector145:$/;"	l
vector146	./kernel.asm	/^vector146:$/;"	l
vector146	./vectors.S	/^vector146:$/;"	l
vector147	./kernel.asm	/^vector147:$/;"	l
vector147	./vectors.S	/^vector147:$/;"	l
vector148	./kernel.asm	/^vector148:$/;"	l
vector148	./vectors.S	/^vector148:$/;"	l
vector149	./kernel.asm	/^vector149:$/;"	l
vector149	./vectors.S	/^vector149:$/;"	l
vector15	./kernel.asm	/^vector15:$/;"	l
vector15	./vectors.S	/^vector15:$/;"	l
vector150	./kernel.asm	/^vector150:$/;"	l
vector150	./vectors.S	/^vector150:$/;"	l
vector151	./kernel.asm	/^vector151:$/;"	l
vector151	./vectors.S	/^vector151:$/;"	l
vector152	./kernel.asm	/^vector152:$/;"	l
vector152	./vectors.S	/^vector152:$/;"	l
vector153	./kernel.asm	/^vector153:$/;"	l
vector153	./vectors.S	/^vector153:$/;"	l
vector154	./kernel.asm	/^vector154:$/;"	l
vector154	./vectors.S	/^vector154:$/;"	l
vector155	./kernel.asm	/^vector155:$/;"	l
vector155	./vectors.S	/^vector155:$/;"	l
vector156	./kernel.asm	/^vector156:$/;"	l
vector156	./vectors.S	/^vector156:$/;"	l
vector157	./kernel.asm	/^vector157:$/;"	l
vector157	./vectors.S	/^vector157:$/;"	l
vector158	./kernel.asm	/^vector158:$/;"	l
vector158	./vectors.S	/^vector158:$/;"	l
vector159	./kernel.asm	/^vector159:$/;"	l
vector159	./vectors.S	/^vector159:$/;"	l
vector16	./kernel.asm	/^vector16:$/;"	l
vector16	./vectors.S	/^vector16:$/;"	l
vector160	./kernel.asm	/^vector160:$/;"	l
vector160	./vectors.S	/^vector160:$/;"	l
vector161	./kernel.asm	/^vector161:$/;"	l
vector161	./vectors.S	/^vector161:$/;"	l
vector162	./kernel.asm	/^vector162:$/;"	l
vector162	./vectors.S	/^vector162:$/;"	l
vector163	./kernel.asm	/^vector163:$/;"	l
vector163	./vectors.S	/^vector163:$/;"	l
vector164	./kernel.asm	/^vector164:$/;"	l
vector164	./vectors.S	/^vector164:$/;"	l
vector165	./kernel.asm	/^vector165:$/;"	l
vector165	./vectors.S	/^vector165:$/;"	l
vector166	./kernel.asm	/^vector166:$/;"	l
vector166	./vectors.S	/^vector166:$/;"	l
vector167	./kernel.asm	/^vector167:$/;"	l
vector167	./vectors.S	/^vector167:$/;"	l
vector168	./kernel.asm	/^vector168:$/;"	l
vector168	./vectors.S	/^vector168:$/;"	l
vector169	./kernel.asm	/^vector169:$/;"	l
vector169	./vectors.S	/^vector169:$/;"	l
vector17	./kernel.asm	/^vector17:$/;"	l
vector17	./vectors.S	/^vector17:$/;"	l
vector170	./kernel.asm	/^vector170:$/;"	l
vector170	./vectors.S	/^vector170:$/;"	l
vector171	./kernel.asm	/^vector171:$/;"	l
vector171	./vectors.S	/^vector171:$/;"	l
vector172	./kernel.asm	/^vector172:$/;"	l
vector172	./vectors.S	/^vector172:$/;"	l
vector173	./kernel.asm	/^vector173:$/;"	l
vector173	./vectors.S	/^vector173:$/;"	l
vector174	./kernel.asm	/^vector174:$/;"	l
vector174	./vectors.S	/^vector174:$/;"	l
vector175	./kernel.asm	/^vector175:$/;"	l
vector175	./vectors.S	/^vector175:$/;"	l
vector176	./kernel.asm	/^vector176:$/;"	l
vector176	./vectors.S	/^vector176:$/;"	l
vector177	./kernel.asm	/^vector177:$/;"	l
vector177	./vectors.S	/^vector177:$/;"	l
vector178	./kernel.asm	/^vector178:$/;"	l
vector178	./vectors.S	/^vector178:$/;"	l
vector179	./kernel.asm	/^vector179:$/;"	l
vector179	./vectors.S	/^vector179:$/;"	l
vector18	./kernel.asm	/^vector18:$/;"	l
vector18	./vectors.S	/^vector18:$/;"	l
vector180	./kernel.asm	/^vector180:$/;"	l
vector180	./vectors.S	/^vector180:$/;"	l
vector181	./kernel.asm	/^vector181:$/;"	l
vector181	./vectors.S	/^vector181:$/;"	l
vector182	./kernel.asm	/^vector182:$/;"	l
vector182	./vectors.S	/^vector182:$/;"	l
vector183	./kernel.asm	/^vector183:$/;"	l
vector183	./vectors.S	/^vector183:$/;"	l
vector184	./kernel.asm	/^vector184:$/;"	l
vector184	./vectors.S	/^vector184:$/;"	l
vector185	./kernel.asm	/^vector185:$/;"	l
vector185	./vectors.S	/^vector185:$/;"	l
vector186	./kernel.asm	/^vector186:$/;"	l
vector186	./vectors.S	/^vector186:$/;"	l
vector187	./kernel.asm	/^vector187:$/;"	l
vector187	./vectors.S	/^vector187:$/;"	l
vector188	./kernel.asm	/^vector188:$/;"	l
vector188	./vectors.S	/^vector188:$/;"	l
vector189	./kernel.asm	/^vector189:$/;"	l
vector189	./vectors.S	/^vector189:$/;"	l
vector19	./kernel.asm	/^vector19:$/;"	l
vector19	./vectors.S	/^vector19:$/;"	l
vector190	./kernel.asm	/^vector190:$/;"	l
vector190	./vectors.S	/^vector190:$/;"	l
vector191	./kernel.asm	/^vector191:$/;"	l
vector191	./vectors.S	/^vector191:$/;"	l
vector192	./kernel.asm	/^vector192:$/;"	l
vector192	./vectors.S	/^vector192:$/;"	l
vector193	./kernel.asm	/^vector193:$/;"	l
vector193	./vectors.S	/^vector193:$/;"	l
vector194	./kernel.asm	/^vector194:$/;"	l
vector194	./vectors.S	/^vector194:$/;"	l
vector195	./kernel.asm	/^vector195:$/;"	l
vector195	./vectors.S	/^vector195:$/;"	l
vector196	./kernel.asm	/^vector196:$/;"	l
vector196	./vectors.S	/^vector196:$/;"	l
vector197	./kernel.asm	/^vector197:$/;"	l
vector197	./vectors.S	/^vector197:$/;"	l
vector198	./kernel.asm	/^vector198:$/;"	l
vector198	./vectors.S	/^vector198:$/;"	l
vector199	./kernel.asm	/^vector199:$/;"	l
vector199	./vectors.S	/^vector199:$/;"	l
vector2	./kernel.asm	/^vector2:$/;"	l
vector2	./vectors.S	/^vector2:$/;"	l
vector20	./kernel.asm	/^vector20:$/;"	l
vector20	./vectors.S	/^vector20:$/;"	l
vector200	./kernel.asm	/^vector200:$/;"	l
vector200	./vectors.S	/^vector200:$/;"	l
vector201	./kernel.asm	/^vector201:$/;"	l
vector201	./vectors.S	/^vector201:$/;"	l
vector202	./kernel.asm	/^vector202:$/;"	l
vector202	./vectors.S	/^vector202:$/;"	l
vector203	./kernel.asm	/^vector203:$/;"	l
vector203	./vectors.S	/^vector203:$/;"	l
vector204	./kernel.asm	/^vector204:$/;"	l
vector204	./vectors.S	/^vector204:$/;"	l
vector205	./kernel.asm	/^vector205:$/;"	l
vector205	./vectors.S	/^vector205:$/;"	l
vector206	./kernel.asm	/^vector206:$/;"	l
vector206	./vectors.S	/^vector206:$/;"	l
vector207	./kernel.asm	/^vector207:$/;"	l
vector207	./vectors.S	/^vector207:$/;"	l
vector208	./kernel.asm	/^vector208:$/;"	l
vector208	./vectors.S	/^vector208:$/;"	l
vector209	./kernel.asm	/^vector209:$/;"	l
vector209	./vectors.S	/^vector209:$/;"	l
vector21	./kernel.asm	/^vector21:$/;"	l
vector21	./vectors.S	/^vector21:$/;"	l
vector210	./kernel.asm	/^vector210:$/;"	l
vector210	./vectors.S	/^vector210:$/;"	l
vector211	./kernel.asm	/^vector211:$/;"	l
vector211	./vectors.S	/^vector211:$/;"	l
vector212	./kernel.asm	/^vector212:$/;"	l
vector212	./vectors.S	/^vector212:$/;"	l
vector213	./kernel.asm	/^vector213:$/;"	l
vector213	./vectors.S	/^vector213:$/;"	l
vector214	./kernel.asm	/^vector214:$/;"	l
vector214	./vectors.S	/^vector214:$/;"	l
vector215	./kernel.asm	/^vector215:$/;"	l
vector215	./vectors.S	/^vector215:$/;"	l
vector216	./kernel.asm	/^vector216:$/;"	l
vector216	./vectors.S	/^vector216:$/;"	l
vector217	./kernel.asm	/^vector217:$/;"	l
vector217	./vectors.S	/^vector217:$/;"	l
vector218	./kernel.asm	/^vector218:$/;"	l
vector218	./vectors.S	/^vector218:$/;"	l
vector219	./kernel.asm	/^vector219:$/;"	l
vector219	./vectors.S	/^vector219:$/;"	l
vector22	./kernel.asm	/^vector22:$/;"	l
vector22	./vectors.S	/^vector22:$/;"	l
vector220	./kernel.asm	/^vector220:$/;"	l
vector220	./vectors.S	/^vector220:$/;"	l
vector221	./kernel.asm	/^vector221:$/;"	l
vector221	./vectors.S	/^vector221:$/;"	l
vector222	./kernel.asm	/^vector222:$/;"	l
vector222	./vectors.S	/^vector222:$/;"	l
vector223	./kernel.asm	/^vector223:$/;"	l
vector223	./vectors.S	/^vector223:$/;"	l
vector224	./kernel.asm	/^vector224:$/;"	l
vector224	./vectors.S	/^vector224:$/;"	l
vector225	./kernel.asm	/^vector225:$/;"	l
vector225	./vectors.S	/^vector225:$/;"	l
vector226	./kernel.asm	/^vector226:$/;"	l
vector226	./vectors.S	/^vector226:$/;"	l
vector227	./kernel.asm	/^vector227:$/;"	l
vector227	./vectors.S	/^vector227:$/;"	l
vector228	./kernel.asm	/^vector228:$/;"	l
vector228	./vectors.S	/^vector228:$/;"	l
vector229	./kernel.asm	/^vector229:$/;"	l
vector229	./vectors.S	/^vector229:$/;"	l
vector23	./kernel.asm	/^vector23:$/;"	l
vector23	./vectors.S	/^vector23:$/;"	l
vector230	./kernel.asm	/^vector230:$/;"	l
vector230	./vectors.S	/^vector230:$/;"	l
vector231	./kernel.asm	/^vector231:$/;"	l
vector231	./vectors.S	/^vector231:$/;"	l
vector232	./kernel.asm	/^vector232:$/;"	l
vector232	./vectors.S	/^vector232:$/;"	l
vector233	./kernel.asm	/^vector233:$/;"	l
vector233	./vectors.S	/^vector233:$/;"	l
vector234	./kernel.asm	/^vector234:$/;"	l
vector234	./vectors.S	/^vector234:$/;"	l
vector235	./kernel.asm	/^vector235:$/;"	l
vector235	./vectors.S	/^vector235:$/;"	l
vector236	./kernel.asm	/^vector236:$/;"	l
vector236	./vectors.S	/^vector236:$/;"	l
vector237	./kernel.asm	/^vector237:$/;"	l
vector237	./vectors.S	/^vector237:$/;"	l
vector238	./kernel.asm	/^vector238:$/;"	l
vector238	./vectors.S	/^vector238:$/;"	l
vector239	./kernel.asm	/^vector239:$/;"	l
vector239	./vectors.S	/^vector239:$/;"	l
vector24	./kernel.asm	/^vector24:$/;"	l
vector24	./vectors.S	/^vector24:$/;"	l
vector240	./kernel.asm	/^vector240:$/;"	l
vector240	./vectors.S	/^vector240:$/;"	l
vector241	./kernel.asm	/^vector241:$/;"	l
vector241	./vectors.S	/^vector241:$/;"	l
vector242	./kernel.asm	/^vector242:$/;"	l
vector242	./vectors.S	/^vector242:$/;"	l
vector243	./kernel.asm	/^vector243:$/;"	l
vector243	./vectors.S	/^vector243:$/;"	l
vector244	./kernel.asm	/^vector244:$/;"	l
vector244	./vectors.S	/^vector244:$/;"	l
vector245	./kernel.asm	/^vector245:$/;"	l
vector245	./vectors.S	/^vector245:$/;"	l
vector246	./kernel.asm	/^vector246:$/;"	l
vector246	./vectors.S	/^vector246:$/;"	l
vector247	./kernel.asm	/^vector247:$/;"	l
vector247	./vectors.S	/^vector247:$/;"	l
vector248	./kernel.asm	/^vector248:$/;"	l
vector248	./vectors.S	/^vector248:$/;"	l
vector249	./kernel.asm	/^vector249:$/;"	l
vector249	./vectors.S	/^vector249:$/;"	l
vector25	./kernel.asm	/^vector25:$/;"	l
vector25	./vectors.S	/^vector25:$/;"	l
vector250	./kernel.asm	/^vector250:$/;"	l
vector250	./vectors.S	/^vector250:$/;"	l
vector251	./kernel.asm	/^vector251:$/;"	l
vector251	./vectors.S	/^vector251:$/;"	l
vector252	./kernel.asm	/^vector252:$/;"	l
vector252	./vectors.S	/^vector252:$/;"	l
vector253	./kernel.asm	/^vector253:$/;"	l
vector253	./vectors.S	/^vector253:$/;"	l
vector254	./kernel.asm	/^vector254:$/;"	l
vector254	./vectors.S	/^vector254:$/;"	l
vector255	./kernel.asm	/^vector255:$/;"	l
vector255	./vectors.S	/^vector255:$/;"	l
vector26	./kernel.asm	/^vector26:$/;"	l
vector26	./vectors.S	/^vector26:$/;"	l
vector27	./kernel.asm	/^vector27:$/;"	l
vector27	./vectors.S	/^vector27:$/;"	l
vector28	./kernel.asm	/^vector28:$/;"	l
vector28	./vectors.S	/^vector28:$/;"	l
vector29	./kernel.asm	/^vector29:$/;"	l
vector29	./vectors.S	/^vector29:$/;"	l
vector3	./kernel.asm	/^vector3:$/;"	l
vector3	./vectors.S	/^vector3:$/;"	l
vector30	./kernel.asm	/^vector30:$/;"	l
vector30	./vectors.S	/^vector30:$/;"	l
vector31	./kernel.asm	/^vector31:$/;"	l
vector31	./vectors.S	/^vector31:$/;"	l
vector32	./kernel.asm	/^vector32:$/;"	l
vector32	./vectors.S	/^vector32:$/;"	l
vector33	./kernel.asm	/^vector33:$/;"	l
vector33	./vectors.S	/^vector33:$/;"	l
vector34	./kernel.asm	/^vector34:$/;"	l
vector34	./vectors.S	/^vector34:$/;"	l
vector35	./kernel.asm	/^vector35:$/;"	l
vector35	./vectors.S	/^vector35:$/;"	l
vector36	./kernel.asm	/^vector36:$/;"	l
vector36	./vectors.S	/^vector36:$/;"	l
vector37	./kernel.asm	/^vector37:$/;"	l
vector37	./vectors.S	/^vector37:$/;"	l
vector38	./kernel.asm	/^vector38:$/;"	l
vector38	./vectors.S	/^vector38:$/;"	l
vector39	./kernel.asm	/^vector39:$/;"	l
vector39	./vectors.S	/^vector39:$/;"	l
vector4	./kernel.asm	/^vector4:$/;"	l
vector4	./vectors.S	/^vector4:$/;"	l
vector40	./kernel.asm	/^vector40:$/;"	l
vector40	./vectors.S	/^vector40:$/;"	l
vector41	./kernel.asm	/^vector41:$/;"	l
vector41	./vectors.S	/^vector41:$/;"	l
vector42	./kernel.asm	/^vector42:$/;"	l
vector42	./vectors.S	/^vector42:$/;"	l
vector43	./kernel.asm	/^vector43:$/;"	l
vector43	./vectors.S	/^vector43:$/;"	l
vector44	./kernel.asm	/^vector44:$/;"	l
vector44	./vectors.S	/^vector44:$/;"	l
vector45	./kernel.asm	/^vector45:$/;"	l
vector45	./vectors.S	/^vector45:$/;"	l
vector46	./kernel.asm	/^vector46:$/;"	l
vector46	./vectors.S	/^vector46:$/;"	l
vector47	./kernel.asm	/^vector47:$/;"	l
vector47	./vectors.S	/^vector47:$/;"	l
vector48	./kernel.asm	/^vector48:$/;"	l
vector48	./vectors.S	/^vector48:$/;"	l
vector49	./kernel.asm	/^vector49:$/;"	l
vector49	./vectors.S	/^vector49:$/;"	l
vector5	./kernel.asm	/^vector5:$/;"	l
vector5	./vectors.S	/^vector5:$/;"	l
vector50	./kernel.asm	/^vector50:$/;"	l
vector50	./vectors.S	/^vector50:$/;"	l
vector51	./kernel.asm	/^vector51:$/;"	l
vector51	./vectors.S	/^vector51:$/;"	l
vector52	./kernel.asm	/^vector52:$/;"	l
vector52	./vectors.S	/^vector52:$/;"	l
vector53	./kernel.asm	/^vector53:$/;"	l
vector53	./vectors.S	/^vector53:$/;"	l
vector54	./kernel.asm	/^vector54:$/;"	l
vector54	./vectors.S	/^vector54:$/;"	l
vector55	./kernel.asm	/^vector55:$/;"	l
vector55	./vectors.S	/^vector55:$/;"	l
vector56	./kernel.asm	/^vector56:$/;"	l
vector56	./vectors.S	/^vector56:$/;"	l
vector57	./kernel.asm	/^vector57:$/;"	l
vector57	./vectors.S	/^vector57:$/;"	l
vector58	./kernel.asm	/^vector58:$/;"	l
vector58	./vectors.S	/^vector58:$/;"	l
vector59	./kernel.asm	/^vector59:$/;"	l
vector59	./vectors.S	/^vector59:$/;"	l
vector6	./kernel.asm	/^vector6:$/;"	l
vector6	./vectors.S	/^vector6:$/;"	l
vector60	./kernel.asm	/^vector60:$/;"	l
vector60	./vectors.S	/^vector60:$/;"	l
vector61	./kernel.asm	/^vector61:$/;"	l
vector61	./vectors.S	/^vector61:$/;"	l
vector62	./kernel.asm	/^vector62:$/;"	l
vector62	./vectors.S	/^vector62:$/;"	l
vector63	./kernel.asm	/^vector63:$/;"	l
vector63	./vectors.S	/^vector63:$/;"	l
vector64	./kernel.asm	/^vector64:$/;"	l
vector64	./vectors.S	/^vector64:$/;"	l
vector65	./kernel.asm	/^vector65:$/;"	l
vector65	./vectors.S	/^vector65:$/;"	l
vector66	./kernel.asm	/^vector66:$/;"	l
vector66	./vectors.S	/^vector66:$/;"	l
vector67	./kernel.asm	/^vector67:$/;"	l
vector67	./vectors.S	/^vector67:$/;"	l
vector68	./kernel.asm	/^vector68:$/;"	l
vector68	./vectors.S	/^vector68:$/;"	l
vector69	./kernel.asm	/^vector69:$/;"	l
vector69	./vectors.S	/^vector69:$/;"	l
vector7	./kernel.asm	/^vector7:$/;"	l
vector7	./vectors.S	/^vector7:$/;"	l
vector70	./kernel.asm	/^vector70:$/;"	l
vector70	./vectors.S	/^vector70:$/;"	l
vector71	./kernel.asm	/^vector71:$/;"	l
vector71	./vectors.S	/^vector71:$/;"	l
vector72	./kernel.asm	/^vector72:$/;"	l
vector72	./vectors.S	/^vector72:$/;"	l
vector73	./kernel.asm	/^vector73:$/;"	l
vector73	./vectors.S	/^vector73:$/;"	l
vector74	./kernel.asm	/^vector74:$/;"	l
vector74	./vectors.S	/^vector74:$/;"	l
vector75	./kernel.asm	/^vector75:$/;"	l
vector75	./vectors.S	/^vector75:$/;"	l
vector76	./kernel.asm	/^vector76:$/;"	l
vector76	./vectors.S	/^vector76:$/;"	l
vector77	./kernel.asm	/^vector77:$/;"	l
vector77	./vectors.S	/^vector77:$/;"	l
vector78	./kernel.asm	/^vector78:$/;"	l
vector78	./vectors.S	/^vector78:$/;"	l
vector79	./kernel.asm	/^vector79:$/;"	l
vector79	./vectors.S	/^vector79:$/;"	l
vector8	./kernel.asm	/^vector8:$/;"	l
vector8	./vectors.S	/^vector8:$/;"	l
vector80	./kernel.asm	/^vector80:$/;"	l
vector80	./vectors.S	/^vector80:$/;"	l
vector81	./kernel.asm	/^vector81:$/;"	l
vector81	./vectors.S	/^vector81:$/;"	l
vector82	./kernel.asm	/^vector82:$/;"	l
vector82	./vectors.S	/^vector82:$/;"	l
vector83	./kernel.asm	/^vector83:$/;"	l
vector83	./vectors.S	/^vector83:$/;"	l
vector84	./kernel.asm	/^vector84:$/;"	l
vector84	./vectors.S	/^vector84:$/;"	l
vector85	./kernel.asm	/^vector85:$/;"	l
vector85	./vectors.S	/^vector85:$/;"	l
vector86	./kernel.asm	/^vector86:$/;"	l
vector86	./vectors.S	/^vector86:$/;"	l
vector87	./kernel.asm	/^vector87:$/;"	l
vector87	./vectors.S	/^vector87:$/;"	l
vector88	./kernel.asm	/^vector88:$/;"	l
vector88	./vectors.S	/^vector88:$/;"	l
vector89	./kernel.asm	/^vector89:$/;"	l
vector89	./vectors.S	/^vector89:$/;"	l
vector9	./kernel.asm	/^vector9:$/;"	l
vector9	./vectors.S	/^vector9:$/;"	l
vector90	./kernel.asm	/^vector90:$/;"	l
vector90	./vectors.S	/^vector90:$/;"	l
vector91	./kernel.asm	/^vector91:$/;"	l
vector91	./vectors.S	/^vector91:$/;"	l
vector92	./kernel.asm	/^vector92:$/;"	l
vector92	./vectors.S	/^vector92:$/;"	l
vector93	./kernel.asm	/^vector93:$/;"	l
vector93	./vectors.S	/^vector93:$/;"	l
vector94	./kernel.asm	/^vector94:$/;"	l
vector94	./vectors.S	/^vector94:$/;"	l
vector95	./kernel.asm	/^vector95:$/;"	l
vector95	./vectors.S	/^vector95:$/;"	l
vector96	./kernel.asm	/^vector96:$/;"	l
vector96	./vectors.S	/^vector96:$/;"	l
vector97	./kernel.asm	/^vector97:$/;"	l
vector97	./vectors.S	/^vector97:$/;"	l
vector98	./kernel.asm	/^vector98:$/;"	l
vector98	./vectors.S	/^vector98:$/;"	l
vector99	./kernel.asm	/^vector99:$/;"	l
vector99	./vectors.S	/^vector99:$/;"	l
vectors	./vectors.S	/^vectors:$/;"	l
version	./elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	./mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	./mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	./mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
virt	./vm.c	/^  void *virt;$/;"	m	struct:kmap	file:
void	./bootblock.asm	/^void$/;"	l
void	./kernel.asm	/^void$/;"	l
w	./console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon3	file:
wait	./proc.c	/^wait(void)$/;"	f
waitdisk	./bootmain.c	/^waitdisk(void)$/;"	f
wakeup	./proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	./proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	./vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
wc	./wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	./sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	./mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	./file.h	/^  char writable;$/;"	m	struct:file
write	./file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	./log.c	/^write_head(void)$/;"	f	file:
write_log	./log.c	/^write_log(void)$/;"	f	file:
writefile	./cuth	/^sub writefile($@){$/;"	s
writei	./fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	./pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	./usertests.c	/^writetest(void)$/;"	f
writetest1	./usertests.c	/^writetest1(void)$/;"	f
wsect	./mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	./kernel.asm	/^    x = -xx;$/;"	d
x	./kernel.asm	/^    x = xx;$/;"	d
x	./umalloc.c	/^  Align x;$/;"	m	union:header	file:
xchecksum	./mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	./x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	./mkfs.c	/^xint(uint x)$/;"	f
xlength	./mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	./mkfs.c	/^xshort(ushort x)$/;"	f
xticks	./kernel.asm	/^  xticks = ticks;$/;"	d
year	./date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	./proc.c	/^yield(void)$/;"	f
zeroes	./mkfs.c	/^char zeroes[BSIZE];$/;"	v
